name: Deploy Staging

on:
  push:
    branches:
      - dc/release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # ========= BUILD ======== #
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - uses: bahmutov/npm-install@v1
      - run: yarn build
        env:
          NEXT_PUBLIC_APM_SERVER: ${{ secrets.ELASTIC_APM_SERVER_URL}}
          NEXT_PUBLIC_SERVICE_VERSION: ${{ steps.pre-version.outputs.version }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      - name: Zip everything
        run: zip -r release.zip . -x "*.git*" "*.github*" "*node_modules*"
      ## Associate release with git commits, so Sentry can guess which commits caused errors
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: sandboxnu
        with:
          version: ${{ steps.pre-version.outputs.version }}
          environment: production
          projects: khoury-office-hours khoury-office-hours-frontend
      - name: Create Sentry release (staging)
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: sandboxnu
        with:
          version: ${{ steps.pre-version.outputs.version }}
          environment: staging
          projects: khoury-office-hours khoury-office-hours-frontend
      # Sourcemaps to Elastic APM
      - name: Upload Sourcemaps to Elastic APM
        run: yarn ts-node packages/app/scripts/uploadSourceMapToAPM.js
        env:
          ELASTIC_APM_SERVER_URL: ${{ secrets.ELASTIC_APM_SERVER_URL}}
          ELASTIC_APM_SECRET_TOKEN: ${{ secrets.ELASTIC_APM_SECRET_TOKEN }}
          SERVICE_VERSION: ${{ steps.pre-version.outputs.version }}
      # ========== CREATE AND UPLOAD RELEASE =========== #
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install SSH key
  #       uses: shimataro/ssh-key-action@v2
  #       with:
  #         key: ${{ secrets.SSH_KEY }}
  #         name: id_rsa
  #         known_hosts: ${{ secrets.KNOWN_HOSTS }}
  #     - uses: actions/checkout@v2
  #     - name: "pm2 deploy to staging"
  #       run: "npx pm2 deploy infrastructure/prod/ecosystem.config.js staging update"
