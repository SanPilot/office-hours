{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Form, Input, List, message, Modal, Switch, Tooltip } from \"antd\";\nimport useSWR from \"swr\";\nimport { API } from \"@koh/api-client\";\nimport { pick } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { requestNotificationPermission, registerNotificationSubscription, NotificationStates, getEndpoint, getNotificationState } from \"../../utils/notification\";\nimport { MinusCircleOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nconst DeviceAddHeader = styled.div.withConfig({\n  displayName: \"NotificationSettingsModal__DeviceAddHeader\",\n  componentId: \"sc-1re6jzf-0\"\n})([\"display:flex;justify-content:space-between;\"]);\nexport function NotificationSettingsModal({\n  visible,\n  onClose\n}) {\n  const {\n    data: profile,\n    error,\n    mutate\n  } = useSWR(`api/v1/profile`, async () => API.profile.index());\n  const [form] = Form.useForm();\n\n  const editProfile = async updateProfile => {\n    const newProfile = _objectSpread(_objectSpread({}, profile), updateProfile);\n\n    mutate(newProfile, false);\n    await API.profile.patch(pick(newProfile, [\"desktopNotifsEnabled\", \"phoneNotifsEnabled\", \"phoneNumber\"]));\n    mutate();\n  };\n\n  const handleOk = async () => {\n    const value = await form.validateFields();\n\n    try {\n      await editProfile(value);\n      form.setFieldsValue(profile);\n      onClose();\n    } catch (e) {\n      var _e$response, _e$response2, _e$response2$data;\n\n      if (((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 400 && ((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) === \"phone number invalid\") {\n        form.setFields([{\n          name: \"phoneNumber\",\n          errors: [\"Invalid phone number\"]\n        }]);\n      }\n    }\n  };\n\n  const handleCancel = () => onClose();\n\n  return __jsx(Modal, {\n    title: \"Notification Settings\",\n    visible: visible,\n    onOk: handleOk,\n    onCancel: handleCancel,\n    footer: __jsx(React.Fragment, null, __jsx(QuestionCircleOutlined, {\n      style: {\n        float: \"left\",\n        fontSize: \"25px\"\n      },\n      onClick: () => window.open(\"https://www.notion.so/593f9eb67eb04abbb8008c285ed5a8dd?v=b3d8ef6b3d2742f1985a6406e582601a\")\n    }), __jsx(Button, {\n      key: \"back\",\n      onClick: handleCancel\n    }, \"Cancel\"), __jsx(Button, {\n      key: \"submit\",\n      type: \"primary\",\n      onClick: handleOk\n    }, \"Ok\"))\n  }, profile && __jsx(Form, {\n    form: form,\n    initialValues: profile\n  }, __jsx(Form.Item, {\n    label: \"Enable notifications on all devices\",\n    name: \"desktopNotifsEnabled\",\n    valuePropName: \"checked\"\n  }, __jsx(Switch, null)), __jsx(Form.Item, {\n    shouldUpdate: true,\n    noStyle: true\n  }, () => (form === null || form === void 0 ? void 0 : form.getFieldValue(\"desktopNotifsEnabled\")) && __jsx(DeviceNotifPanel, null)), __jsx(Form.Item, {\n    style: {\n      marginTop: \"30px\"\n    },\n    label: \"Enable SMS notifications\",\n    name: \"phoneNotifsEnabled\",\n    valuePropName: \"checked\"\n  }, __jsx(Switch, null)), __jsx(Form.Item, {\n    shouldUpdate: true,\n    noStyle: true\n  }, () => (form === null || form === void 0 ? void 0 : form.getFieldValue(\"phoneNotifsEnabled\")) && __jsx(Form.Item, {\n    label: \"Phone #\",\n    name: \"phoneNumber\",\n    rules: [{\n      required: true,\n      message: \"Please input your number to enable text notifications\"\n    }]\n  }, __jsx(Input, {\n    placeholder: \"XXX-XXX-XXXX\"\n  })))));\n}\n\nfunction useThisDeviceEndpoint() {\n  const {\n    0: endpoint,\n    1: setEndpoint\n  } = useState(null);\n  useEffect(() => {\n    (async () => setEndpoint(await getEndpoint()))();\n  });\n  return endpoint;\n}\n\nfunction renderDeviceInfo(device, isThisDevice) {\n  if (device.name) {\n    return isThisDevice ? `${device.name} (This Device)` : device.name;\n  } else {\n    return isThisDevice ? \"This Device\" : \"Other Device\";\n  }\n}\n\nfunction DeviceNotifPanel() {\n  var _profile$desktopNotif;\n\n  const thisEndpoint = useThisDeviceEndpoint();\n  const {\n    data: profile,\n    mutate\n  } = useSWR(`api/v1/profile`, async () => API.profile.index());\n  const thisDesktopNotif = profile === null || profile === void 0 ? void 0 : (_profile$desktopNotif = profile.desktopNotifs) === null || _profile$desktopNotif === void 0 ? void 0 : _profile$desktopNotif.find(dn => dn.endpoint === thisEndpoint);\n  return __jsx(\"div\", null, __jsx(DeviceAddHeader, null, __jsx(\"h3\", null, \"Your Devices\"), !thisDesktopNotif && __jsx(Tooltip, {\n    title: getNotificationState() === NotificationStates.browserUnsupported && \"Browser does not support notifications. Please use Chrome or Firefox, and not Incognito Mode.\"\n  }, __jsx(Button, {\n    onClick: async () => {\n      const canNotify = await requestNotificationPermission();\n\n      if (canNotify === NotificationStates.notAllowed) {\n        message.warning(\"Please allow notifications in this browser\");\n      }\n\n      if (canNotify === NotificationStates.granted) {\n        await registerNotificationSubscription();\n        mutate();\n      }\n    },\n    disabled: getNotificationState() === NotificationStates.browserUnsupported,\n    style: {\n      marginBottom: \"4px\"\n    }\n  }, \"Add This Device\"))), __jsx(List, {\n    bordered: true,\n    dataSource: profile.desktopNotifs,\n    locale: {\n      emptyText: \"No Devices Registered To Receive Notifications\"\n    },\n    renderItem: device => __jsx(List.Item, {\n      actions: [__jsx(MinusCircleOutlined, {\n        style: {\n          fontSize: \"20px\"\n        },\n        key: 0,\n        onClick: async () => {\n          await API.notif.desktop.unregister(device.id);\n          mutate();\n        }\n      })]\n    }, __jsx(List.Item.Meta, {\n      title: renderDeviceInfo(device, device.endpoint === thisEndpoint),\n      description: `Registered ${device.createdAt.toLocaleDateString()}`\n    }))\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}