{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { CheckOutlined, CloseOutlined, UndoOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { ClosedQuestionStatus, LimboQuestionStatus } from \"@koh/common\";\nimport { Col, Popconfirm, Row } from \"antd\";\nimport styled from \"styled-components\";\nimport AvatarWithInitals from \"../../common/AvatarWithInitials\";\nimport Banner, { RequeueButton, TABannerButton, TABannerDangerButton } from \"../Banner\";\nconst Bold = styled.span.withConfig({\n  displayName: \"TABanner__Bold\",\n  componentId: \"sc-1qx526g-0\"\n})([\"font-weight:bold;\"]);\nconst InfoHeader = styled.div.withConfig({\n  displayName: \"TABanner__InfoHeader\",\n  componentId: \"sc-1qx526g-1\"\n})([\"font-weight:bold;font-size:14px;font-variant:small-caps;line-height:1;\"]);\nconst Info = styled.div.withConfig({\n  displayName: \"TABanner__Info\",\n  componentId: \"sc-1qx526g-2\"\n})([\"margin-top:8px;margin-bottom:16px;\"]);\nexport default function TABanner({\n  helpingQuestion,\n  updateQuestion\n}) {\n  var _helpingQuestion$text, _helpingQuestion$ques, _helpingQuestion$crea;\n\n  const alertStudent = async () => await API.questions.notify(helpingQuestion.id);\n\n  return __jsx(Banner, {\n    titleColor: \"#3684C6\",\n    contentColor: \"#ABD4F3\",\n    title: __jsx(\"span\", null, \"You are helping \", __jsx(Bold, null, helpingQuestion.creator.name)),\n    content: __jsx(Row, null, __jsx(Col, {\n      flex: \"88px\"\n    }, __jsx(AvatarWithInitals, {\n      size: 64,\n      fontSize: 36,\n      name: helpingQuestion.creator.name\n    })), __jsx(Col, null, __jsx(InfoHeader, null, \"question\"), __jsx(Info, null, (_helpingQuestion$text = helpingQuestion.text) !== null && _helpingQuestion$text !== void 0 ? _helpingQuestion$text : \"\"), __jsx(InfoHeader, null, \"type\"), __jsx(Info, null, (_helpingQuestion$ques = helpingQuestion.questionType) !== null && _helpingQuestion$ques !== void 0 ? _helpingQuestion$ques : \"\"), __jsx(InfoHeader, null, \"email\"), __jsx(Info, null, (_helpingQuestion$crea = helpingQuestion.creator.email) !== null && _helpingQuestion$crea !== void 0 ? _helpingQuestion$crea : \"\"))),\n    buttons: __jsx(React.Fragment, null, __jsx(Popconfirm, {\n      title: \"Are you sure you want to send this student back to the queue?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: async () => {\n        await updateQuestion(helpingQuestion, LimboQuestionStatus.ReQueueing);\n      }\n    }, __jsx(RequeueButton, {\n      icon: __jsx(UndoOutlined, null)\n    }, \"Requeue Student\")), __jsx(Popconfirm, {\n      title: \"Are you sure you can't find this student?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: async () => {\n        await updateQuestion(helpingQuestion, LimboQuestionStatus.CantFind);\n        await alertStudent();\n      }\n    }, __jsx(TABannerDangerButton, {\n      icon: __jsx(CloseOutlined, null),\n      \"data-cy\": \"remove-from-queue\"\n    }, \"Can't Find\")), __jsx(TABannerButton, {\n      icon: __jsx(CheckOutlined, null),\n      onClick: () => updateQuestion(helpingQuestion, ClosedQuestionStatus.Resolved)\n    }, \"Finish Helping\"))\n  });\n}","map":null,"metadata":{},"sourceType":"module"}