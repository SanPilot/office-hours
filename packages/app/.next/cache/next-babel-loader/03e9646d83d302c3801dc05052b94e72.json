{"ast":null,"code":"export function getWaitTime(question) {\n  var now = new Date();\n  var difference = now.getTime() - question.createdAt.getTime();\n  return \"\".concat(Math.round(difference / 60000), \" min\");\n}\nexport function formatQueueTime(queue) {\n  return formatDateTime(queue.startTime) + \" - \" + formatDateTime(queue.endTime);\n}\n\nfunction formatDateTime(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? \"PM\" : \"AM\";\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  return hours + \":\" + minutes + \" \" + ampm;\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/utils/TimeUtil.ts"],"names":["getWaitTime","question","now","Date","difference","getTime","createdAt","Math","round","formatQueueTime","queue","formatDateTime","startTime","endTime","date","hours","getHours","minutes","getMinutes","ampm"],"mappings":"AAEA,OAAO,SAASA,WAAT,CAAqBC,QAArB,EAAiD;AACtD,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAMC,UAAU,GAAGF,GAAG,CAACG,OAAJ,KAAgBJ,QAAQ,CAACK,SAAT,CAAmBD,OAAnB,EAAnC;AACA,mBAAUE,IAAI,CAACC,KAAL,CAAWJ,UAAU,GAAG,KAAxB,CAAV;AACD;AAED,OAAO,SAASK,eAAT,CAAyBC,KAAzB,EAAsD;AAC3D,SACEC,cAAc,CAACD,KAAK,CAACE,SAAP,CAAd,GAAkC,KAAlC,GAA0CD,cAAc,CAACD,KAAK,CAACG,OAAP,CAD1D;AAGD;;AAED,SAASF,cAAT,CAAwBG,IAAxB,EAAoC;AAClC,MAAIC,KAAK,GAAGD,IAAI,CAACE,QAAL,EAAZ;AACA,MAAIC,OAAY,GAAGH,IAAI,CAACI,UAAL,EAAnB;AACA,MAAMC,IAAI,GAAGJ,KAAK,IAAI,EAAT,GAAc,IAAd,GAAqB,IAAlC;AACAA,EAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACAA,EAAAA,KAAK,GAAGA,KAAK,GAAGA,KAAH,GAAW,EAAxB,CALkC,CAKN;;AAC5BE,EAAAA,OAAO,GAAGA,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+BA,OAAzC;AACA,SAAOF,KAAK,GAAG,GAAR,GAAcE,OAAd,GAAwB,GAAxB,GAA8BE,IAArC;AACD","sourcesContent":["import { Question, QueuePartial } from \"@koh/common\";\n\nexport function getWaitTime(question: Question): string {\n  const now = new Date();\n  const difference = now.getTime() - question.createdAt.getTime();\n  return `${Math.round(difference / 60000)} min`;\n}\n\nexport function formatQueueTime(queue: QueuePartial): string {\n  return (\n    formatDateTime(queue.startTime) + \" - \" + formatDateTime(queue.endTime)\n  );\n}\n\nfunction formatDateTime(date: Date) {\n  let hours = date.getHours();\n  let minutes: any = date.getMinutes();\n  const ampm = hours >= 12 ? \"PM\" : \"AM\";\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  return hours + \":\" + minutes + \" \" + ampm;\n}\n"]},"metadata":{},"sourceType":"module"}