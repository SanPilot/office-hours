{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { OpenQuestionStatus, QuestionStatusKeys } from \"@koh/common\";\nimport { Card, Col, notification, Row, Space, Tooltip } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { NotificationSettingsModal } from \"../../Nav/NotificationSettingsModal\";\nimport { QueueInfoColumn, QueueInfoColumnButton, QueuePageContainer, VerticalDivider } from \"../QueueListSharedComponents\";\nimport { EditQueueModal } from \"./EditQueueModal\";\nimport StudentPopupCard from \"./StudentPopupCard\";\nimport TABanner from \"./TABanner\";\nimport TAQueueCard from \"./TAQueueCard\";\nvar StatusText = styled.div.withConfig({\n  displayName: \"TAQueueList__StatusText\",\n  componentId: \"sc-1dyac0n-0\"\n})([\"font-size:14px;font-weight:500;line-height:22px;color:#8895a6;font-variant:small-caps;width:96px;float:right;margin-right:0;\"]);\nvar TAHeaderCard = styled(Card).withConfig({\n  displayName: \"TAQueueList__TAHeaderCard\",\n  componentId: \"sc-1dyac0n-1\"\n})([\"height:64px;background:inherit;\"]);\nvar HeaderText = styled.div.withConfig({\n  displayName: \"TAQueueList__HeaderText\",\n  componentId: \"sc-1dyac0n-2\"\n})([\"font-size:14px;font-weight:500;line-height:22px;color:#8895a6;font-variant:small-caps;\"]);\nvar CenterRow = styled(Row).withConfig({\n  displayName: \"TAQueueList__CenterRow\",\n  componentId: \"sc-1dyac0n-3\"\n})([\"align-items:center;justify-content:space-between;\"]);\nvar Placeholder = styled.div.withConfig({\n  displayName: \"TAQueueList__Placeholder\",\n  componentId: \"sc-1dyac0n-4\"\n})([\"width:14px;\"]);\nvar CheckOutButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__CheckOutButton\",\n  componentId: \"sc-1dyac0n-5\"\n})([\"color:#da3236;\"]);\nvar CheckInButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__CheckInButton\",\n  componentId: \"sc-1dyac0n-6\"\n})([\"color:white;background:#2a9187;\"]);\nvar HelpNextButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__HelpNextButton\",\n  componentId: \"sc-1dyac0n-7\"\n})([\"color:white;background:#2a9187;&:hover,&:focus{color:white;background:#39aca1;}\"]);\nvar EditQueueButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__EditQueueButton\",\n  componentId: \"sc-1dyac0n-8\"\n})([\"color:#212934;\"]);\nvar PriorityQueueQuestionBubble = styled(QuestionCircleOutlined).withConfig({\n  displayName: \"TAQueueList__PriorityQueueQuestionBubble\",\n  componentId: \"sc-1dyac0n-9\"\n})([\"fontsize:20;margin-left:20px;\"]);\nexport default function TAQueueList(_ref) {\n  var _questions$questionsG, _questions$queue, _questions$priorityQu, _questions$queue2;\n\n  var qid = _ref.qid,\n      courseId = _ref.courseId;\n  var user = useProfile();\n\n  var _useQueue = useQueue(qid),\n      queue = _useQueue.queue,\n      mutateQueue = _useQueue.mutateQueue;\n\n  var _useQuestions = useQuestions(qid),\n      questions = _useQuestions.questions,\n      questionsError = _useQuestions.questionsError,\n      mutateQuestions = _useQuestions.mutateQuestions;\n\n  var renderedQuestions = questions === null || questions === void 0 ? void 0 : questions.queue;\n  var helpingQuestion = questions === null || questions === void 0 ? void 0 : (_questions$questionsG = questions.questionsGettingHelp) === null || _questions$questionsG === void 0 ? void 0 : _questions$questionsG.find(function (question) {\n    var _question$taHelped;\n\n    return ((_question$taHelped = question.taHelped) === null || _question$taHelped === void 0 ? void 0 : _question$taHelped.id) === user.id;\n  });\n  var isHelping = !!helpingQuestion;\n\n  var _useState = useState(false),\n      openPopup = _useState[0],\n      setOpenPopup = _useState[1];\n\n  var _useState2 = useState(false),\n      queueSettingsModal = _useState2[0],\n      setQueueSettingsModal = _useState2[1];\n\n  var _useState3 = useState(null),\n      currentQuestion = _useState3[0],\n      setCurrentQuestion = _useState3[1]; // Close popup if currentQuestion no longer exists in the cache\n\n\n  if (currentQuestion && !(questions === null || questions === void 0 ? void 0 : (_questions$queue = questions.queue) === null || _questions$queue === void 0 ? void 0 : _questions$queue.includes(currentQuestion)) && !(questions === null || questions === void 0 ? void 0 : (_questions$priorityQu = questions.priorityQueue) === null || _questions$priorityQu === void 0 ? void 0 : _questions$priorityQu.includes(currentQuestion))) {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }\n\n  var onOpenCard = useCallback(function (question) {\n    setCurrentQuestion(question);\n    setOpenPopup(true);\n  }, []);\n  var onCloseClick = useCallback(function () {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }, []);\n\n  var updateQuestionTA = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(question, status) {\n      var _e$response, _e$response2, _e$response2$data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.questions.update(question.id, {\n                status: status\n              });\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (((_e$response = _context.t0.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 401 && ((_e$response2 = _context.t0.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) === \"Another TA is currently helping with this question\") {\n                notification.open({\n                  message: \"Another TA is currently helping the student\",\n                  description: \"This happens when another TA clicks help at the exact same time\",\n                  type: \"error\",\n                  duration: 3,\n                  className: \"hide-in-percy\",\n                  style: {\n                    width: 450\n                  }\n                });\n              }\n\n            case 8:\n              mutateQuestions();\n              setOpenPopup(false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 5]]);\n    }));\n\n    return function updateQuestionTA(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var isStaffCheckedIn = queue === null || queue === void 0 ? void 0 : queue.staffList.some(function (e) {\n    return e.id === (user === null || user === void 0 ? void 0 : user.id);\n  });\n  var nextQuestion = (questions === null || questions === void 0 ? void 0 : questions.priorityQueue[0]) || ( // gets the first item of priority queue if it exists\n  questions === null || questions === void 0 ? void 0 : (_questions$queue2 = questions.queue) === null || _questions$queue2 === void 0 ? void 0 : _questions$queue2.find(function (question) {\n    return question.status === QuestionStatusKeys.Queued;\n  }));\n\n  var helpNext = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return updateQuestionTA(nextQuestion, OpenQuestionStatus.Helping);\n\n            case 2:\n              window.open(\"https://teams.microsoft.com/l/chat/0/0?users=\".concat(nextQuestion.creator.email));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function helpNext() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  if (queue && questions) {\n    return __jsx(React.Fragment, null, __jsx(QueuePageContainer, null, __jsx(QueueInfoColumn, {\n      queueId: qid,\n      buttons: __jsx(React.Fragment, null, __jsx(EditQueueButton, {\n        \"data-cy\": \"editQueue\",\n        onClick: function onClick() {\n          return setQueueSettingsModal(true);\n        }\n      }, \"Edit Queue Details\"), __jsx(Tooltip, {\n        title: !isStaffCheckedIn && \"You must check in to help students!\"\n      }, __jsx(HelpNextButton, {\n        onClick: helpNext,\n        disabled: !isStaffCheckedIn || !nextQuestion || isHelping,\n        \"data-cy\": \"help-next\"\n      }, \"Help Next\")), isStaffCheckedIn ? __jsx(CheckOutButton, {\n        danger: true,\n        disabled: isHelping,\n        \"data-cy\": \"check-out-button\",\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return API.taStatus.checkOut(courseId, queue === null || queue === void 0 ? void 0 : queue.room);\n\n                case 2:\n                  mutateQueue();\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }))\n      }, \"Check Out\") : __jsx(CheckInButton, {\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return API.taStatus.checkIn(courseId, queue === null || queue === void 0 ? void 0 : queue.room);\n\n                case 2:\n                  mutateQueue();\n\n                case 3:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        })),\n        \"data-cy\": \"check-in-button\"\n      }, \"Check In\"))\n    }), __jsx(VerticalDivider, null), __jsx(Space, {\n      direction: \"vertical\",\n      size: 40,\n      style: {\n        flexGrow: 1\n      }\n    }, isHelping && __jsx(TABanner, {\n      helpingQuestion: helpingQuestion,\n      updateQuestion: updateQuestionTA\n    }), !!questions.priorityQueue.length && __jsx(QueueQuestions, {\n      questions: questions.priorityQueue,\n      isHelping: isHelping,\n      onOpenCard: onOpenCard,\n      title: //TODO\n      __jsx(React.Fragment, null, \"Priority Queue\", __jsx(Tooltip, {\n        title: \"Students in the priority queue were at the top of the queue before for some reason (e.g. they were at the top but AFK, or a TA helped them previously, and then hit 'requeue student.' You should communicate with your fellow staff members to prioritize these students first.\"\n      }, __jsx(PriorityQueueQuestionBubble, null)))\n    }), __jsx(QueueQuestions, {\n      questions: renderedQuestions,\n      isHelping: isHelping,\n      onOpenCard: onOpenCard,\n      title: __jsx(\"div\", null, \"Queue\")\n    }))), currentQuestion && __jsx(StudentPopupCard, {\n      onClose: onCloseClick,\n      question: currentQuestion,\n      visible: openPopup,\n      updateQuestion: updateQuestionTA,\n      isStaffCheckedIn: isStaffCheckedIn\n    }), __jsx(EditQueueModal, {\n      queueId: qid,\n      visible: queueSettingsModal,\n      onClose: function onClose() {\n        return setQueueSettingsModal(false);\n      }\n    }));\n  } else {\n    return __jsx(\"div\", null);\n  }\n}\nvar QueueHeader = styled.h2.withConfig({\n  displayName: \"TAQueueList__QueueHeader\",\n  componentId: \"sc-1dyac0n-10\"\n})([\"font-weight:500;font-size:24px;color:#212934;margin-bottom:0;\"]);\nvar NoQuestionsText = styled.div.withConfig({\n  displayName: \"TAQueueList__NoQuestionsText\",\n  componentId: \"sc-1dyac0n-11\"\n})([\"font-weight:500;font-size:24px;color:#212934;\"]);\n\nfunction NotifReminderButton() {\n  var _useState4 = useState(false),\n      isNotifOpen = _useState4[0],\n      setIsNotifOpen = _useState4[1];\n\n  var NotifRemindButton = styled(QueueInfoColumnButton).withConfig({\n    displayName: \"TAQueueList__NotifRemindButton\",\n    componentId: \"sc-1dyac0n-12\"\n  })([\"margin-top:16px;border-radius:6px;background:#fff;\"]);\n  return __jsx(React.Fragment, null, __jsx(NotifRemindButton, {\n    onClick: function onClick(e) {\n      return setIsNotifOpen(true);\n    }\n  }, \"Sign Up for Notifications\"), isNotifOpen && __jsx(NotificationSettingsModal, {\n    visible: isNotifOpen,\n    onClose: function onClose() {\n      return setIsNotifOpen(false);\n    }\n  }));\n}\n\nfunction QueueQuestions(_ref6) {\n  var questions = _ref6.questions,\n      isHelping = _ref6.isHelping,\n      onOpenCard = _ref6.onOpenCard,\n      title = _ref6.title;\n\n  var _useProfile = useProfile(),\n      phoneNotifsEnabled = _useProfile.phoneNotifsEnabled,\n      desktopNotifsEnabled = _useProfile.desktopNotifsEnabled;\n\n  return __jsx(\"div\", {\n    \"data-cy\": \"queueQuestions\"\n  }, questions.length === 0 ? __jsx(React.Fragment, null, __jsx(NoQuestionsText, null, \"There are no questions in the queue\"), !isHelping && !phoneNotifsEnabled && !desktopNotifsEnabled && __jsx(NotifReminderButton, null)) : __jsx(React.Fragment, null, __jsx(React.Fragment, null, __jsx(QueueHeader, null, title)), __jsx(TAHeaderCard, {\n    bordered: false\n  }, __jsx(CenterRow, {\n    justify: \"space-between\"\n  }, __jsx(Col, {\n    xs: 2,\n    lg: 1\n  }, __jsx(HeaderText, null, \"#\")), __jsx(Col, {\n    xs: 14,\n    sm: 11,\n    lg: 5\n  }, __jsx(HeaderText, null, \"name\")), __jsx(Col, {\n    xs: 0,\n    lg: 2\n  }, __jsx(HeaderText, null, \"type\")), __jsx(Col, {\n    xs: 0,\n    lg: 7\n  }, __jsx(HeaderText, null, \"question\")), __jsx(Col, {\n    xs: 0,\n    lg: 2\n  }, __jsx(HeaderText, null, \"wait\")), __jsx(Col, {\n    span: 2\n  }, __jsx(StatusText, null, \"status\")), __jsx(Col, null, __jsx(Placeholder, null))))), questions.map(function (question, index) {\n    return __jsx(TAQueueCard, {\n      key: question.id,\n      rank: index + 1,\n      question: question,\n      onOpen: function onOpen(q) {\n        return !isHelping && onOpenCard(q);\n      }\n    });\n  }));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/TA/TAQueueList.tsx"],"names":["QuestionCircleOutlined","API","OpenQuestionStatus","QuestionStatusKeys","Card","Col","notification","Row","Space","Tooltip","React","useCallback","useState","styled","useProfile","useQuestions","useQueue","NotificationSettingsModal","QueueInfoColumn","QueueInfoColumnButton","QueuePageContainer","VerticalDivider","EditQueueModal","StudentPopupCard","TABanner","TAQueueCard","StatusText","div","TAHeaderCard","HeaderText","CenterRow","Placeholder","CheckOutButton","CheckInButton","HelpNextButton","EditQueueButton","PriorityQueueQuestionBubble","TAQueueList","qid","courseId","user","queue","mutateQueue","questions","questionsError","mutateQuestions","renderedQuestions","helpingQuestion","questionsGettingHelp","find","question","taHelped","id","isHelping","openPopup","setOpenPopup","queueSettingsModal","setQueueSettingsModal","currentQuestion","setCurrentQuestion","includes","priorityQueue","onOpenCard","onCloseClick","updateQuestionTA","status","update","response","data","message","open","description","type","duration","className","style","width","isStaffCheckedIn","staffList","some","e","nextQuestion","Queued","helpNext","Helping","window","creator","email","taStatus","checkOut","room","checkIn","flexGrow","length","QueueHeader","h2","NoQuestionsText","NotifReminderButton","isNotifOpen","setIsNotifOpen","NotifRemindButton","QueueQuestions","title","phoneNotifsEnabled","desktopNotifsEnabled","map","index","q"],"mappings":"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","sourcesContent":["import { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport {\n  OpenQuestionStatus,\n  Question,\n  QuestionStatus,\n  QuestionStatusKeys,\n} from \"@koh/common\";\nimport { Card, Col, notification, Row, Space, Tooltip } from \"antd\";\nimport React, { ReactElement, useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { NotificationSettingsModal } from \"../../Nav/NotificationSettingsModal\";\nimport {\n  QueueInfoColumn,\n  QueueInfoColumnButton,\n  QueuePageContainer,\n  VerticalDivider,\n} from \"../QueueListSharedComponents\";\nimport { EditQueueModal } from \"./EditQueueModal\";\nimport StudentPopupCard from \"./StudentPopupCard\";\nimport TABanner from \"./TABanner\";\nimport TAQueueCard from \"./TAQueueCard\";\n\nconst StatusText = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 22px;\n  color: #8895a6;\n  font-variant: small-caps;\n  width: 96px;\n  float: right;\n  margin-right: 0;\n`;\n\nconst TAHeaderCard = styled(Card)`\n  height: 64px;\n  background: inherit;\n`;\n\nconst HeaderText = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 22px;\n  color: #8895a6;\n  font-variant: small-caps;\n`;\n\nconst CenterRow = styled(Row)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Placeholder = styled.div`\n  width: 14px;\n`;\n\nconst CheckOutButton = styled(QueueInfoColumnButton)`\n  color: #da3236;\n`;\n\nconst CheckInButton = styled(QueueInfoColumnButton)`\n  color: white;\n  background: #2a9187;\n`;\n\nconst HelpNextButton = styled(QueueInfoColumnButton)`\n  color: white;\n  background: #2a9187;\n  &:hover,\n  &:focus {\n    color: white;\n    background: #39aca1;\n  }\n`;\n\nconst EditQueueButton = styled(QueueInfoColumnButton)`\n  color: #212934;\n`;\n\nconst PriorityQueueQuestionBubble = styled(QuestionCircleOutlined)`\n  fontsize: 20;\n  margin-left: 20px;\n`;\n\ninterface TAQueueListProps {\n  qid: number;\n  courseId: number;\n}\n\nexport default function TAQueueList({\n  qid,\n  courseId,\n}: TAQueueListProps): ReactElement {\n  const user = useProfile();\n\n  const { queue, mutateQueue } = useQueue(qid);\n\n  const { questions, questionsError, mutateQuestions } = useQuestions(qid);\n\n  const renderedQuestions = questions?.queue;\n\n  const helpingQuestion = questions?.questionsGettingHelp?.find(\n    (question) => question.taHelped?.id === user.id\n  );\n  const isHelping = !!helpingQuestion;\n\n  const [openPopup, setOpenPopup] = useState<boolean>(false);\n  const [queueSettingsModal, setQueueSettingsModal] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState<Question>(null);\n\n  // Close popup if currentQuestion no longer exists in the cache\n  if (\n    currentQuestion &&\n    !questions?.queue?.includes(currentQuestion) &&\n    !questions?.priorityQueue?.includes(currentQuestion)\n  ) {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }\n\n  const onOpenCard = useCallback((question: Question): void => {\n    setCurrentQuestion(question);\n    setOpenPopup(true);\n  }, []);\n\n  const onCloseClick = useCallback((): void => {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }, []);\n\n  const updateQuestionTA = async (\n    question: Question,\n    status: QuestionStatus\n  ) => {\n    try {\n      await API.questions.update(question.id, {\n        status: status,\n      });\n    } catch (e) {\n      if (\n        e.response?.status === 401 &&\n        e.response?.data?.message ===\n          \"Another TA is currently helping with this question\"\n      ) {\n        notification.open({\n          message: \"Another TA is currently helping the student\",\n          description:\n            \"This happens when another TA clicks help at the exact same time\",\n          type: \"error\",\n          duration: 3,\n          className: \"hide-in-percy\",\n          style: {\n            width: 450,\n          },\n        });\n      }\n    }\n    mutateQuestions();\n    setOpenPopup(false);\n  };\n\n  const isStaffCheckedIn = queue?.staffList.some((e) => e.id === user?.id);\n\n  const nextQuestion =\n    questions?.priorityQueue[0] || // gets the first item of priority queue if it exists\n    questions?.queue?.find(\n      (question) => question.status === QuestionStatusKeys.Queued\n    );\n\n  const helpNext = async () => {\n    await updateQuestionTA(nextQuestion, OpenQuestionStatus.Helping);\n    window.open(\n      `https://teams.microsoft.com/l/chat/0/0?users=${nextQuestion.creator.email}`\n    );\n  };\n\n  if (queue && questions) {\n    return (\n      <>\n        <QueuePageContainer>\n          <QueueInfoColumn\n            queueId={qid}\n            buttons={\n              <>\n                <EditQueueButton\n                  data-cy=\"editQueue\"\n                  onClick={() => setQueueSettingsModal(true)}\n                >\n                  Edit Queue Details\n                </EditQueueButton>\n                <Tooltip\n                  title={\n                    !isStaffCheckedIn && \"You must check in to help students!\"\n                  }\n                >\n                  <HelpNextButton\n                    onClick={helpNext}\n                    disabled={!isStaffCheckedIn || !nextQuestion || isHelping}\n                    data-cy=\"help-next\"\n                  >\n                    Help Next\n                  </HelpNextButton>\n                </Tooltip>\n                {isStaffCheckedIn ? (\n                  <CheckOutButton\n                    danger\n                    disabled={isHelping}\n                    data-cy=\"check-out-button\"\n                    onClick={async () => {\n                      await API.taStatus.checkOut(courseId, queue?.room);\n                      mutateQueue();\n                    }}\n                  >\n                    Check Out\n                  </CheckOutButton>\n                ) : (\n                  <CheckInButton\n                    onClick={async () => {\n                      await API.taStatus.checkIn(courseId, queue?.room);\n                      mutateQueue();\n                    }}\n                    data-cy=\"check-in-button\"\n                  >\n                    Check In\n                  </CheckInButton>\n                )}\n              </>\n            }\n          />\n          <VerticalDivider />\n          <Space direction=\"vertical\" size={40} style={{ flexGrow: 1 }}>\n            {isHelping && (\n              <TABanner\n                helpingQuestion={helpingQuestion}\n                updateQuestion={updateQuestionTA}\n              />\n            )}\n            {!!questions.priorityQueue.length && (\n              <QueueQuestions\n                questions={questions.priorityQueue}\n                isHelping={isHelping}\n                onOpenCard={onOpenCard}\n                title={\n                  //TODO\n                  <>\n                    Priority Queue\n                    <Tooltip title=\"Students in the priority queue were at the top of the queue before for some reason (e.g. they were at the top but AFK, or a TA helped them previously, and then hit 'requeue student.' You should communicate with your fellow staff members to prioritize these students first.\">\n                      <PriorityQueueQuestionBubble />\n                    </Tooltip>\n                  </>\n                }\n              />\n            )}\n            <QueueQuestions\n              questions={renderedQuestions}\n              isHelping={isHelping}\n              onOpenCard={onOpenCard}\n              title={<div>Queue</div>}\n            />\n          </Space>\n        </QueuePageContainer>\n        {currentQuestion && (\n          <StudentPopupCard\n            onClose={onCloseClick}\n            question={currentQuestion}\n            visible={openPopup}\n            updateQuestion={updateQuestionTA}\n            isStaffCheckedIn={isStaffCheckedIn}\n          />\n        )}\n        <EditQueueModal\n          queueId={qid}\n          visible={queueSettingsModal}\n          onClose={() => setQueueSettingsModal(false)}\n        />\n      </>\n    );\n  } else {\n    return <div />;\n  }\n}\n\nconst QueueHeader = styled.h2`\n  font-weight: 500;\n  font-size: 24px;\n  color: #212934;\n  margin-bottom: 0;\n`;\n\nconst NoQuestionsText = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  color: #212934;\n`;\n\nfunction NotifReminderButton() {\n  const [isNotifOpen, setIsNotifOpen] = useState(false);\n  const NotifRemindButton = styled(QueueInfoColumnButton)`\n    margin-top: 16px;\n    border-radius: 6px;\n    background: #fff;\n  `;\n\n  return (\n    <>\n      <NotifRemindButton onClick={(e) => setIsNotifOpen(true)}>\n        Sign Up for Notifications\n      </NotifRemindButton>\n      {isNotifOpen && (\n        <NotificationSettingsModal\n          visible={isNotifOpen}\n          onClose={() => setIsNotifOpen(false)}\n        />\n      )}\n    </>\n  );\n}\n\ninterface QueueProps {\n  questions: Question[];\n  isHelping: boolean;\n  onOpenCard: (q: Question) => void;\n  title: ReactElement;\n}\nfunction QueueQuestions({\n  questions,\n  isHelping,\n  onOpenCard,\n  title,\n}: QueueProps) {\n  const { phoneNotifsEnabled, desktopNotifsEnabled } = useProfile();\n  return (\n    <div data-cy=\"queueQuestions\">\n      {questions.length === 0 ? (\n        <>\n          <NoQuestionsText>There are no questions in the queue</NoQuestionsText>\n          {!isHelping && !phoneNotifsEnabled && !desktopNotifsEnabled && (\n            <NotifReminderButton />\n          )}\n        </>\n      ) : (\n        <>\n          <>\n            <QueueHeader>{title}</QueueHeader>\n          </>\n          <TAHeaderCard bordered={false}>\n            <CenterRow justify=\"space-between\">\n              <Col xs={2} lg={1}>\n                <HeaderText>#</HeaderText>\n              </Col>\n              <Col xs={14} sm={11} lg={5}>\n                <HeaderText>name</HeaderText>\n              </Col>\n              <Col xs={0} lg={2}>\n                <HeaderText>type</HeaderText>\n              </Col>\n              <Col xs={0} lg={7}>\n                <HeaderText>question</HeaderText>\n              </Col>\n              <Col xs={0} lg={2}>\n                <HeaderText>wait</HeaderText>\n              </Col>\n              <Col span={2}>\n                <StatusText>status</StatusText>\n              </Col>\n              <Col>\n                <Placeholder />\n              </Col>\n            </CenterRow>\n          </TAHeaderCard>\n        </>\n      )}\n      {questions.map((question: Question, index: number) => (\n        <TAQueueCard\n          key={question.id}\n          rank={index + 1}\n          question={question}\n          onOpen={(q) => !isHelping && onOpenCard(q)}\n        />\n      ))}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}