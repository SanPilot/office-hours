{"ast":null,"code":"var __jsx = React.createElement;\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { OpenQuestionStatus, QuestionStatusKeys } from \"@koh/common\";\nimport { Card, Col, notification, Row, Space, Tooltip } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { NotificationSettingsModal } from \"../../Nav/NotificationSettingsModal\";\nimport { QueueInfoColumn, QueueInfoColumnButton, QueuePageContainer, VerticalDivider } from \"../QueueListSharedComponents\";\nimport { EditQueueModal } from \"./EditQueueModal\";\nimport StudentPopupCard from \"./StudentPopupCard\";\nimport TABanner from \"./TABanner\";\nimport TAQueueCard from \"./TAQueueCard\";\nconst StatusText = styled.div.withConfig({\n  displayName: \"TAQueueList__StatusText\",\n  componentId: \"sc-1dyac0n-0\"\n})([\"font-size:14px;font-weight:500;line-height:22px;color:#8895a6;font-variant:small-caps;width:96px;float:right;margin-right:0;\"]);\nconst TAHeaderCard = styled(Card).withConfig({\n  displayName: \"TAQueueList__TAHeaderCard\",\n  componentId: \"sc-1dyac0n-1\"\n})([\"height:64px;background:inherit;\"]);\nconst HeaderText = styled.div.withConfig({\n  displayName: \"TAQueueList__HeaderText\",\n  componentId: \"sc-1dyac0n-2\"\n})([\"font-size:14px;font-weight:500;line-height:22px;color:#8895a6;font-variant:small-caps;\"]);\nconst CenterRow = styled(Row).withConfig({\n  displayName: \"TAQueueList__CenterRow\",\n  componentId: \"sc-1dyac0n-3\"\n})([\"align-items:center;justify-content:space-between;\"]);\nconst Placeholder = styled.div.withConfig({\n  displayName: \"TAQueueList__Placeholder\",\n  componentId: \"sc-1dyac0n-4\"\n})([\"width:14px;\"]);\nconst CheckOutButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__CheckOutButton\",\n  componentId: \"sc-1dyac0n-5\"\n})([\"color:#da3236;\"]);\nconst CheckInButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__CheckInButton\",\n  componentId: \"sc-1dyac0n-6\"\n})([\"color:white;background:#2a9187;\"]);\nconst HelpNextButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__HelpNextButton\",\n  componentId: \"sc-1dyac0n-7\"\n})([\"color:white;background:#2a9187;&:hover,&:focus{color:white;background:#39aca1;}\"]);\nconst EditQueueButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__EditQueueButton\",\n  componentId: \"sc-1dyac0n-8\"\n})([\"color:#212934;\"]);\nconst PriorityQueueQuestionBubble = styled(QuestionCircleOutlined).withConfig({\n  displayName: \"TAQueueList__PriorityQueueQuestionBubble\",\n  componentId: \"sc-1dyac0n-9\"\n})([\"fontsize:20;margin-left:20px;\"]);\nexport default function TAQueueList({\n  qid,\n  courseId\n}) {\n  var _questions$questionsG, _questions$queue, _questions$priorityQu, _questions$queue2;\n\n  const user = useProfile();\n  const {\n    queue,\n    mutateQueue\n  } = useQueue(qid);\n  const {\n    questions,\n    questionsError,\n    mutateQuestions\n  } = useQuestions(qid);\n  const renderedQuestions = questions === null || questions === void 0 ? void 0 : questions.queue;\n  const helpingQuestion = questions === null || questions === void 0 ? void 0 : (_questions$questionsG = questions.questionsGettingHelp) === null || _questions$questionsG === void 0 ? void 0 : _questions$questionsG.find(question => {\n    var _question$taHelped;\n\n    return ((_question$taHelped = question.taHelped) === null || _question$taHelped === void 0 ? void 0 : _question$taHelped.id) === user.id;\n  });\n  const isHelping = !!helpingQuestion;\n  const {\n    0: openPopup,\n    1: setOpenPopup\n  } = useState(false);\n  const {\n    0: queueSettingsModal,\n    1: setQueueSettingsModal\n  } = useState(false);\n  const {\n    0: currentQuestion,\n    1: setCurrentQuestion\n  } = useState(null); // Close popup if currentQuestion no longer exists in the cache\n\n  if (currentQuestion && !(questions === null || questions === void 0 ? void 0 : (_questions$queue = questions.queue) === null || _questions$queue === void 0 ? void 0 : _questions$queue.includes(currentQuestion)) && !(questions === null || questions === void 0 ? void 0 : (_questions$priorityQu = questions.priorityQueue) === null || _questions$priorityQu === void 0 ? void 0 : _questions$priorityQu.includes(currentQuestion))) {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }\n\n  const onOpenCard = useCallback(question => {\n    setCurrentQuestion(question);\n    setOpenPopup(true);\n  }, []);\n  const onCloseClick = useCallback(() => {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }, []);\n\n  const updateQuestionTA = async (question, status) => {\n    try {\n      await API.questions.update(question.id, {\n        status: status\n      });\n    } catch (e) {\n      var _e$response, _e$response2, _e$response2$data;\n\n      if (((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 401 && ((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) === \"Another TA is currently helping with this question\") {\n        notification.open({\n          message: \"Another TA is currently helping the student\",\n          description: \"This happens when another TA clicks help at the exact same time\",\n          type: \"error\",\n          duration: 3,\n          className: \"hide-in-percy\",\n          style: {\n            width: 450\n          }\n        });\n      }\n    }\n\n    mutateQuestions();\n    setOpenPopup(false);\n  };\n\n  const isStaffCheckedIn = queue === null || queue === void 0 ? void 0 : queue.staffList.some(e => e.id === (user === null || user === void 0 ? void 0 : user.id));\n  const nextQuestion = (questions === null || questions === void 0 ? void 0 : questions.priorityQueue[0]) || ( // gets the first item of priority queue if it exists\n  questions === null || questions === void 0 ? void 0 : (_questions$queue2 = questions.queue) === null || _questions$queue2 === void 0 ? void 0 : _questions$queue2.find(question => question.status === QuestionStatusKeys.Queued));\n\n  const helpNext = async () => {\n    await updateQuestionTA(nextQuestion, OpenQuestionStatus.Helping);\n    window.open(`https://teams.microsoft.com/l/chat/0/0?users=${nextQuestion.creator.email}`);\n  };\n\n  if (queue && questions) {\n    return __jsx(React.Fragment, null, __jsx(QueuePageContainer, null, __jsx(QueueInfoColumn, {\n      queueId: qid,\n      buttons: __jsx(React.Fragment, null, __jsx(EditQueueButton, {\n        \"data-cy\": \"editQueue\",\n        onClick: () => setQueueSettingsModal(true)\n      }, \"Edit Queue Details\"), __jsx(Tooltip, {\n        title: !isStaffCheckedIn && \"You must check in to help students!\"\n      }, __jsx(HelpNextButton, {\n        onClick: helpNext,\n        disabled: !isStaffCheckedIn || !nextQuestion || isHelping,\n        \"data-cy\": \"help-next\"\n      }, \"Help Next\")), isStaffCheckedIn ? __jsx(CheckOutButton, {\n        danger: true,\n        disabled: isHelping,\n        \"data-cy\": \"check-out-button\",\n        onClick: async () => {\n          await API.taStatus.checkOut(courseId, queue === null || queue === void 0 ? void 0 : queue.room);\n          mutateQueue();\n        }\n      }, \"Check Out\") : __jsx(CheckInButton, {\n        onClick: async () => {\n          await API.taStatus.checkIn(courseId, queue === null || queue === void 0 ? void 0 : queue.room);\n          mutateQueue();\n        },\n        \"data-cy\": \"check-in-button\"\n      }, \"Check In\"))\n    }), __jsx(VerticalDivider, null), __jsx(Space, {\n      direction: \"vertical\",\n      size: 40,\n      style: {\n        flexGrow: 1\n      }\n    }, isHelping && __jsx(TABanner, {\n      helpingQuestion: helpingQuestion,\n      updateQuestion: updateQuestionTA\n    }), !!questions.priorityQueue.length && __jsx(QueueQuestions, {\n      questions: questions.priorityQueue,\n      isHelping: isHelping,\n      onOpenCard: onOpenCard,\n      title: //TODO\n      __jsx(React.Fragment, null, \"Priority Queue\", __jsx(Tooltip, {\n        title: \"Students in the priority queue were at the top of the queue before for some reason (e.g. they were at the top but AFK, or a TA helped them previously, and then hit 'requeue student.' You should communicate with your fellow staff members to prioritize these students first.\"\n      }, __jsx(PriorityQueueQuestionBubble, null)))\n    }), __jsx(QueueQuestions, {\n      questions: renderedQuestions,\n      isHelping: isHelping,\n      onOpenCard: onOpenCard,\n      title: __jsx(\"div\", null, \"Queue\")\n    }))), currentQuestion && __jsx(StudentPopupCard, {\n      onClose: onCloseClick,\n      question: currentQuestion,\n      visible: openPopup,\n      updateQuestion: updateQuestionTA,\n      isStaffCheckedIn: isStaffCheckedIn\n    }), __jsx(EditQueueModal, {\n      queueId: qid,\n      visible: queueSettingsModal,\n      onClose: () => setQueueSettingsModal(false)\n    }));\n  } else {\n    return __jsx(\"div\", null);\n  }\n}\nconst QueueHeader = styled.h2.withConfig({\n  displayName: \"TAQueueList__QueueHeader\",\n  componentId: \"sc-1dyac0n-10\"\n})([\"font-weight:500;font-size:24px;color:#212934;margin-bottom:0;\"]);\nconst NoQuestionsText = styled.div.withConfig({\n  displayName: \"TAQueueList__NoQuestionsText\",\n  componentId: \"sc-1dyac0n-11\"\n})([\"font-weight:500;font-size:24px;color:#212934;\"]);\n\nfunction NotifReminderButton() {\n  const {\n    0: isNotifOpen,\n    1: setIsNotifOpen\n  } = useState(false);\n  const NotifRemindButton = styled(QueueInfoColumnButton).withConfig({\n    displayName: \"TAQueueList__NotifRemindButton\",\n    componentId: \"sc-1dyac0n-12\"\n  })([\"margin-top:16px;border-radius:6px;background:#fff;\"]);\n  return __jsx(React.Fragment, null, __jsx(NotifRemindButton, {\n    onClick: e => setIsNotifOpen(true)\n  }, \"Sign Up for Notifications\"), isNotifOpen && __jsx(NotificationSettingsModal, {\n    visible: isNotifOpen,\n    onClose: () => setIsNotifOpen(false)\n  }));\n}\n\nfunction QueueQuestions({\n  questions,\n  isHelping,\n  onOpenCard,\n  title\n}) {\n  const {\n    phoneNotifsEnabled,\n    desktopNotifsEnabled\n  } = useProfile();\n  return __jsx(\"div\", {\n    \"data-cy\": \"queueQuestions\"\n  }, questions.length === 0 ? __jsx(React.Fragment, null, __jsx(NoQuestionsText, null, \"There are no questions in the queue\"), !isHelping && !phoneNotifsEnabled && !desktopNotifsEnabled && __jsx(NotifReminderButton, null)) : __jsx(React.Fragment, null, __jsx(React.Fragment, null, __jsx(QueueHeader, null, title)), __jsx(TAHeaderCard, {\n    bordered: false\n  }, __jsx(CenterRow, {\n    justify: \"space-between\"\n  }, __jsx(Col, {\n    xs: 2,\n    lg: 1\n  }, __jsx(HeaderText, null, \"#\")), __jsx(Col, {\n    xs: 14,\n    sm: 11,\n    lg: 5\n  }, __jsx(HeaderText, null, \"name\")), __jsx(Col, {\n    xs: 0,\n    lg: 2\n  }, __jsx(HeaderText, null, \"type\")), __jsx(Col, {\n    xs: 0,\n    lg: 7\n  }, __jsx(HeaderText, null, \"question\")), __jsx(Col, {\n    xs: 0,\n    lg: 2\n  }, __jsx(HeaderText, null, \"wait\")), __jsx(Col, {\n    span: 2\n  }, __jsx(StatusText, null, \"status\")), __jsx(Col, null, __jsx(Placeholder, null))))), questions.map((question, index) => __jsx(TAQueueCard, {\n    key: question.id,\n    rank: index + 1,\n    question: question,\n    onOpen: q => !isHelping && onOpenCard(q)\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}