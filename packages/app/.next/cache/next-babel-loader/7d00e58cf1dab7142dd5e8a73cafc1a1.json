{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport { CheckOutlined, CloseOutlined, UndoOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport { ClosedQuestionStatus, LimboQuestionStatus } from \"@koh/common\";\nimport { Col, Popconfirm, Row, Tooltip, message } from \"antd\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport AvatarWithInitals from \"../../common/AvatarWithInitials\";\nimport Banner, { CantFindButton, FinishHelpingButton, RequeueButton } from \"../Banner\";\nvar Bold = styled.span.withConfig({\n  displayName: \"TABanner__Bold\",\n  componentId: \"sc-1qx526g-0\"\n})([\"font-weight:bold;\"]);\nvar InfoHeader = styled.div.withConfig({\n  displayName: \"TABanner__InfoHeader\",\n  componentId: \"sc-1qx526g-1\"\n})([\"font-weight:bold;font-size:14px;font-variant:small-caps;line-height:1;\"]);\nvar Info = styled.div.withConfig({\n  displayName: \"TABanner__Info\",\n  componentId: \"sc-1qx526g-2\"\n})([\"margin-top:8px;margin-bottom:16px;\"]);\nvar PRORITY_QUEUED_MESSAGE_TEXT = \"This student has been temporarily removed from the queue. They must select to rejoin the queue and will then be placed in the Priority Queue.\";\nexport default function TABanner(_ref) {\n  var _helpingQuestion$text, _helpingQuestion$ques, _helpingQuestion$crea;\n\n  var helpingQuestion = _ref.helpingQuestion,\n      updateQuestion = _ref.updateQuestion;\n\n  var alertStudent = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return API.questions.notify(helpingQuestion.id);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function alertStudent() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Banner, {\n    titleColor: \"#3684C6\",\n    contentColor: \"#ABD4F3\",\n    title: __jsx(\"span\", null, \"You are helping \", __jsx(Bold, null, helpingQuestion.creator.name)),\n    content: __jsx(Row, null, __jsx(Col, {\n      flex: \"88px\"\n    }, __jsx(AvatarWithInitals, {\n      size: 64,\n      fontSize: 36,\n      name: helpingQuestion.creator.name\n    })), __jsx(Col, null, __jsx(InfoHeader, null, \"question\"), __jsx(Info, null, (_helpingQuestion$text = helpingQuestion.text) !== null && _helpingQuestion$text !== void 0 ? _helpingQuestion$text : \"\"), __jsx(InfoHeader, null, \"type\"), __jsx(Info, null, (_helpingQuestion$ques = helpingQuestion.questionType) !== null && _helpingQuestion$ques !== void 0 ? _helpingQuestion$ques : \"\"), __jsx(InfoHeader, null, \"email\"), __jsx(Info, null, (_helpingQuestion$crea = helpingQuestion.creator.email) !== null && _helpingQuestion$crea !== void 0 ? _helpingQuestion$crea : \"\"))),\n    buttons: __jsx(React.Fragment, null, __jsx(Popconfirm, {\n      title: \"Are you sure you want to send this student back to the queue?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n                _context2.next = 3;\n                return updateQuestion(helpingQuestion, LimboQuestionStatus.ReQueueing);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))\n    }, __jsx(Tooltip, {\n      title: \"Requeue Student\"\n    }, __jsx(RequeueButton, {\n      icon: __jsx(UndoOutlined, null),\n      \"data-cy\": \"requeue-student-button\"\n    }))), __jsx(Popconfirm, {\n      title: \"Are you sure you can't find this student?\",\n      okText: \"Yes\",\n      cancelText: \"No\",\n      onConfirm: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n                _context3.next = 3;\n                return updateQuestion(helpingQuestion, LimboQuestionStatus.CantFind);\n\n              case 3:\n                _context3.next = 5;\n                return alertStudent();\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))\n    }, __jsx(Tooltip, {\n      title: \"Can't Find\"\n    }, __jsx(CantFindButton, {\n      shape: \"circle\",\n      icon: __jsx(CloseOutlined, null),\n      \"data-cy\": \"cant-find-button\"\n    }))), __jsx(Tooltip, {\n      title: \"Finish Helping\"\n    }, __jsx(FinishHelpingButton, {\n      icon: __jsx(CheckOutlined, null),\n      onClick: function onClick() {\n        return updateQuestion(helpingQuestion, ClosedQuestionStatus.Resolved);\n      },\n      \"data-cy\": \"finish-helping-button\"\n    })))\n  });\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/TA/TABanner.tsx"],"names":["CheckOutlined","CloseOutlined","UndoOutlined","API","ClosedQuestionStatus","LimboQuestionStatus","Col","Popconfirm","Row","Tooltip","message","React","styled","AvatarWithInitals","Banner","CantFindButton","FinishHelpingButton","RequeueButton","Bold","span","InfoHeader","div","Info","PRORITY_QUEUED_MESSAGE_TEXT","TABanner","helpingQuestion","updateQuestion","alertStudent","questions","notify","id","creator","name","text","questionType","email","success","ReQueueing","CantFind","Resolved"],"mappings":"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","sourcesContent":["import { CheckOutlined, CloseOutlined, UndoOutlined } from \"@ant-design/icons\";\nimport { API } from \"@koh/api-client\";\nimport {\n  ClosedQuestionStatus,\n  LimboQuestionStatus,\n  Question,\n  QuestionStatus,\n} from \"@koh/common\";\nimport { Col, Popconfirm, Row, Tooltip, message } from \"antd\";\nimport React, { ReactElement } from \"react\";\nimport styled from \"styled-components\";\nimport AvatarWithInitals from \"../../common/AvatarWithInitials\";\nimport Banner, {\n  CantFindButton,\n  FinishHelpingButton,\n  RequeueButton,\n} from \"../Banner\";\n\nconst Bold = styled.span`\n  font-weight: bold;\n`;\nconst InfoHeader = styled.div`\n  font-weight: bold;\n  font-size: 14px;\n  font-variant: small-caps;\n  line-height: 1;\n`;\nconst Info = styled.div`\n  margin-top: 8px;\n  margin-bottom: 16px;\n`;\n\ninterface TABannerProps {\n  helpingQuestion: Question;\n  updateQuestion: (question: Question, status: QuestionStatus) => Promise<void>;\n}\n\nconst PRORITY_QUEUED_MESSAGE_TEXT =\n  \"This student has been temporarily removed from the queue. They must select to rejoin the queue and will then be placed in the Priority Queue.\";\n\nexport default function TABanner({\n  helpingQuestion,\n  updateQuestion,\n}: TABannerProps): ReactElement {\n  const alertStudent = async () =>\n    await API.questions.notify(helpingQuestion.id);\n\n  return (\n    <Banner\n      titleColor=\"#3684C6\"\n      contentColor=\"#ABD4F3\"\n      title={\n        <span>\n          You are helping <Bold>{helpingQuestion.creator.name}</Bold>\n        </span>\n      }\n      content={\n        <Row>\n          <Col flex=\"88px\">\n            {\n              //TODO: bring back photo URL && get rid of RegeX\n              //icon={<UserOutlined />}\n              //src={helpingQuestion.creator.photoURL}\n            }\n            <AvatarWithInitals\n              size={64}\n              fontSize={36}\n              name={helpingQuestion.creator.name}\n            />\n          </Col>\n          <Col>\n            <InfoHeader>question</InfoHeader>\n            <Info>{helpingQuestion.text ?? \"\"}</Info>\n            <InfoHeader>type</InfoHeader>\n            <Info>{helpingQuestion.questionType ?? \"\"}</Info>\n            <InfoHeader>email</InfoHeader>\n            <Info>{helpingQuestion.creator.email ?? \"\"}</Info>\n          </Col>\n        </Row>\n      }\n      buttons={\n        <>\n          <Popconfirm\n            title=\"Are you sure you want to send this student back to the queue?\"\n            okText=\"Yes\"\n            cancelText=\"No\"\n            onConfirm={async () => {\n              message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n              await updateQuestion(\n                helpingQuestion,\n                LimboQuestionStatus.ReQueueing\n              );\n            }}\n          >\n            <Tooltip title=\"Requeue Student\">\n              <RequeueButton\n                icon={<UndoOutlined />}\n                data-cy=\"requeue-student-button\"\n              />\n            </Tooltip>\n          </Popconfirm>\n          <Popconfirm\n            title=\"Are you sure you can't find this student?\"\n            okText=\"Yes\"\n            cancelText=\"No\"\n            onConfirm={async () => {\n              message.success(PRORITY_QUEUED_MESSAGE_TEXT, 2);\n              await updateQuestion(\n                helpingQuestion,\n                LimboQuestionStatus.CantFind\n              );\n              await alertStudent();\n            }}\n          >\n            <Tooltip title=\"Can't Find\">\n              <CantFindButton\n                shape=\"circle\"\n                icon={<CloseOutlined />}\n                data-cy=\"cant-find-button\"\n              />\n            </Tooltip>\n          </Popconfirm>\n          <Tooltip title=\"Finish Helping\">\n            <FinishHelpingButton\n              icon={<CheckOutlined />}\n              onClick={() =>\n                updateQuestion(helpingQuestion, ClosedQuestionStatus.Resolved)\n              }\n              data-cy=\"finish-helping-button\"\n            />\n          </Tooltip>\n        </>\n      }\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}