{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { API } from \"@koh/api-client\";\nimport { ClosedQuestionStatus, OpenQuestionStatus, QuestionType } from \"@koh/common\";\nimport { Card, Col, notification, Popconfirm, Row, Space } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { mutate } from \"swr\";\nimport { useDraftQuestion } from \"../../../hooks/useDraftQuestion\";\nimport { useLocalStorage } from \"../../../hooks/useLocalStorage\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { useStudentQuestion } from \"../../../hooks/useStudentQuestion\";\nimport { NotificationSettingsModal } from \"../../Nav/NotificationSettingsModal\";\nimport { QueueInfoColumn, QueueInfoColumnButton, QueuePageContainer, VerticalDivider } from \"../QueueListSharedComponents\";\nimport QuestionForm from \"./QuestionForm\";\nimport StudentBanner from \"./StudentBanner\";\nimport CantFindModal from \"./StudentCantFindModal\";\nimport StudentQueueCard from \"./StudentQueueCard\";\nimport StudentRemovedFromQueueModal from \"./StudentRemovedFromQueueModal\";\nvar JoinButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"StudentQueueList__JoinButton\",\n  componentId: \"sc-1rfhbhu-0\"\n})([\"background-color:#3684c6;color:white;\"]);\nvar StudentHeaderCard = styled(Card).withConfig({\n  displayName: \"StudentQueueList__StudentHeaderCard\",\n  componentId: \"sc-1rfhbhu-1\"\n})([\"height:64px;padding-left:8px;padding-right:8px;background:inherit;\"]);\nvar HeaderText = styled.div.withConfig({\n  displayName: \"StudentQueueList__HeaderText\",\n  componentId: \"sc-1rfhbhu-2\"\n})([\"font-size:14px;font-weight:500;line-height:22px;color:#8895a6;font-variant:small-caps;\"]);\nvar CenterRow = styled(Row).withConfig({\n  displayName: \"StudentQueueList__CenterRow\",\n  componentId: \"sc-1rfhbhu-3\"\n})([\"align-items:center;\"]);\nexport default function StudentQueueList(_ref) {\n  var qid = _ref.qid;\n\n  var _useQueue = useQueue(qid),\n      queue = _useQueue.queue,\n      mutateQueue = _useQueue.mutateQueue;\n\n  var _useQuestions = useQuestions(qid),\n      questions = _useQuestions.questions,\n      questionsError = _useQuestions.questionsError,\n      mutateQuestions = _useQuestions.mutateQuestions;\n\n  var _useStudentQuestion = useStudentQuestion(qid),\n      studentQuestion = _useStudentQuestion.studentQuestion,\n      studentQuestionIndex = _useStudentQuestion.studentQuestionIndex;\n\n  var _useLocalStorage = useLocalStorage(\"isFirstQuestion\", true),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      isFirstQuestion = _useLocalStorage2[0],\n      setIsFirstQuestion = _useLocalStorage2[1];\n\n  var _useState = useState(false),\n      notifModalOpen = _useState[0],\n      setNotifModalOpen = _useState[1];\n\n  var _useState2 = useState(false),\n      showJoinPopconfirm = _useState2[0],\n      setShowJoinPopconfirm = _useState2[1];\n\n  var _useDraftQuestion = useDraftQuestion(),\n      deleteDraftQuestion = _useDraftQuestion.deleteDraftQuestion;\n\n  var leaveQueue = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return API.questions.update(studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.id, {\n              status: ClosedQuestionStatus.ConfirmedDeleted\n            });\n\n          case 2:\n            setIsJoining(false);\n            _context.next = 5;\n            return mutateQuestions();\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.id, mutateQuestions]);\n  var rejoinQueue = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return API.questions.update(studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.id, {\n              status: OpenQuestionStatus.Queued\n            });\n\n          case 2:\n            _context2.next = 4;\n            return mutateQuestions();\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.id, mutateQuestions]);\n  var finishQuestion = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(text, questionType) {\n      var updateStudent, newQuestions;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              updateStudent = {\n                text: text,\n                questionType: questionType,\n                status: OpenQuestionStatus.Queued\n              };\n              _context3.next = 3;\n              return API.questions.update(studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.id, updateStudent);\n\n            case 3:\n              newQuestions = questions === null || questions === void 0 ? void 0 : questions.map(function (q) {\n                return q.id === (studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.id) ? _objectSpread(_objectSpread({}, q), {}, {\n                  updateStudent: updateStudent\n                }) : q;\n              });\n              mutateQuestions(newQuestions);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [questions, studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.id, mutateQuestions]);\n  var joinQueueAfterDeletion = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var newQuestion;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return API.questions.update(studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.id, {\n              status: ClosedQuestionStatus.ConfirmedDeleted\n            });\n\n          case 2:\n            _context4.next = 4;\n            return mutateQuestions();\n\n          case 4:\n            _context4.next = 6;\n            return API.questions.create({\n              text: studentQuestion.text,\n              questionType: studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.questionType,\n              queueId: qid,\n              isOnline: studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.isOnline,\n              location: studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.location,\n              force: true\n            });\n\n          case 6:\n            newQuestion = _context4.sent;\n            _context4.next = 9;\n            return API.questions.update(newQuestion.id, {\n              status: OpenQuestionStatus.Queued\n            });\n\n          case 9:\n            _context4.next = 11;\n            return mutateQuestions();\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })), [mutateQuestions, qid, studentQuestion]);\n\n  var _useState3 = useState(false),\n      popupEditQuestion = _useState3[0],\n      setPopupEditQuestion = _useState3[1];\n\n  var _useState4 = useState(questions && studentQuestion && (studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.status) !== OpenQuestionStatus.Queued),\n      isJoining = _useState4[0],\n      setIsJoining = _useState4[1];\n\n  var openEditModal = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            mutate(\"/api/v1/queues/\".concat(qid, \"/questions\"));\n            setPopupEditQuestion(true);\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  })), [qid]);\n  var closeEditModal = useCallback(function () {\n    setPopupEditQuestion(false);\n    setIsJoining(false);\n  }, []);\n  var leaveQueueAndClose = useCallback(function () {\n    //delete draft when they leave the queue\n    deleteDraftQuestion();\n    leaveQueue();\n    closeEditModal();\n  }, [deleteDraftQuestion, leaveQueue, closeEditModal]);\n  var joinQueueOpenModal = useCallback( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(force) {\n      var createdQuestion, newQuestions, _e$response, _e$response$data, _e$response$data$mess;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return API.questions.create({\n                queueId: Number(qid),\n                text: \"\",\n                force: force,\n                questionType: QuestionType.Bug // TODO: endpoint needs to be changed to allow empty questionType for drafts\n                // for the moment I am defaulting this data so that there is no error\n\n              });\n\n            case 3:\n              createdQuestion = _context6.sent;\n              newQuestions = [].concat(_toConsumableArray(questions), [createdQuestion]);\n              _context6.next = 7;\n              return mutateQuestions(newQuestions);\n\n            case 7:\n              setPopupEditQuestion(true);\n              return _context6.abrupt(\"return\", true);\n\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](0);\n\n              if (!((_e$response = _context6.t0.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : (_e$response$data$mess = _e$response$data.message) === null || _e$response$data$mess === void 0 ? void 0 : _e$response$data$mess.includes(\"You can't create more than one question at a time\"))) {\n                _context6.next = 15;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", false);\n\n            case 15:\n              return _context6.abrupt(\"return\", true);\n\n            case 16:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 11]]);\n    }));\n\n    return function (_x3) {\n      return _ref7.apply(this, arguments);\n    };\n  }(), [mutateQuestions, qid, questions]);\n  var finishQuestionAndClose = useCallback(function (text, qt) {\n    deleteDraftQuestion();\n    finishQuestion(text, qt);\n    closeEditModal();\n\n    if (isFirstQuestion) {\n      notification.warn({\n        style: {\n          cursor: \"pointer\"\n        },\n        message: \"Enable Notifications\",\n        description: \"Turn on notifications for when it's almost your turn to get help.\",\n        placement: \"bottomRight\",\n        duration: 0,\n        onClick: function onClick() {\n          notification.destroy();\n          setNotifModalOpen(true);\n          setIsFirstQuestion(false);\n        }\n      });\n    }\n  }, [deleteDraftQuestion, finishQuestion, closeEditModal, isFirstQuestion, setIsFirstQuestion]);\n\n  if (queue && questions) {\n    if (!queue.isOpen) {\n      return __jsx(\"h1\", {\n        style: {\n          marginTop: \"50px\"\n        }\n      }, \"The Queue is Closed!\");\n    }\n\n    return __jsx(React.Fragment, null, __jsx(QueuePageContainer, null, __jsx(CantFindModal, {\n      visible: (studentQuestion === null || studentQuestion === void 0 ? void 0 : studentQuestion.status) === OpenQuestionStatus.CantFind,\n      leaveQueue: leaveQueue,\n      rejoinQueue: rejoinQueue\n    }), __jsx(StudentRemovedFromQueueModal, {\n      question: studentQuestion,\n      leaveQueue: leaveQueue,\n      joinQueue: joinQueueAfterDeletion\n    }), __jsx(QueueInfoColumn, {\n      queueId: qid,\n      buttons: !studentQuestion && __jsx(Popconfirm, {\n        title: \"In order to join this queue, you must delete your previous question. Do you want to continue?\",\n        onConfirm: function onConfirm() {\n          return joinQueueOpenModal(true);\n        },\n        okText: \"Yes\",\n        cancelText: \"No\",\n        disabled: true,\n        visible: showJoinPopconfirm,\n        onVisibleChange: setShowJoinPopconfirm\n      }, __jsx(JoinButton, {\n        type: \"primary\",\n        disabled: !(queue === null || queue === void 0 ? void 0 : queue.allowQuestions),\n        \"data-cy\": \"join-queue-button\",\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.t0 = setShowJoinPopconfirm;\n                  _context7.next = 3;\n                  return joinQueueOpenModal(false);\n\n                case 3:\n                  _context7.t1 = !_context7.sent;\n                  return _context7.abrupt(\"return\", (0, _context7.t0)(_context7.t1));\n\n                case 5:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }))\n      }, \"Join Queue\"))\n    }), __jsx(VerticalDivider, null), __jsx(Space, {\n      direction: \"vertical\",\n      size: 40,\n      style: {\n        flexGrow: 1\n      }\n    }, studentQuestion && __jsx(StudentBanner, {\n      queueId: qid,\n      editQuestion: openEditModal,\n      leaveQueue: leaveQueue\n    }), __jsx(QueueQuestions, {\n      questions: questions,\n      studentQuestion: studentQuestion\n    }))), __jsx(QuestionForm, {\n      visible: questions && !studentQuestion && isJoining || // && studentQuestion.status !== QuestionStatusKeys.Drafting)\n      popupEditQuestion,\n      question: studentQuestion,\n      leaveQueue: leaveQueueAndClose,\n      finishQuestion: finishQuestionAndClose,\n      position: studentQuestionIndex + 1,\n      cancel: closeEditModal\n    }), __jsx(NotificationSettingsModal, {\n      visible: notifModalOpen,\n      onClose: function onClose() {\n        return setNotifModalOpen(false);\n      }\n    }));\n  } else {\n    return __jsx(\"div\", null);\n  }\n}\nvar QueueHeader = styled.h2.withConfig({\n  displayName: \"StudentQueueList__QueueHeader\",\n  componentId: \"sc-1rfhbhu-4\"\n})([\"font-weight:500;font-size:24px;color:#212934;margin-bottom:0;\"]);\nvar NoQuestionsText = styled.div.withConfig({\n  displayName: \"StudentQueueList__NoQuestionsText\",\n  componentId: \"sc-1rfhbhu-5\"\n})([\"font-weight:500;font-size:24px;color:#212934;\"]); // I think we could share this with the TA\n\nfunction QueueQuestions(_ref9) {\n  var questions = _ref9.questions,\n      studentQuestion = _ref9.studentQuestion;\n  var renderedQuestions = questions === null || questions === void 0 ? void 0 : questions.filter(function (question) {\n    return question.status !== OpenQuestionStatus.TADeleted && question.status !== OpenQuestionStatus.Helping && question.status !== OpenQuestionStatus.CantFind;\n  });\n  return __jsx(\"div\", {\n    \"data-cy\": \"queueQuestions\"\n  }, (renderedQuestions === null || renderedQuestions === void 0 ? void 0 : renderedQuestions.length) === 0 ? __jsx(NoQuestionsText, null, \"There are no questions in the queue\") : __jsx(React.Fragment, null, __jsx(QueueHeader, null, \"Queue\"), __jsx(StudentHeaderCard, {\n    bordered: false\n  }, __jsx(CenterRow, null, __jsx(Col, {\n    flex: \"0 0 64px\"\n  }, __jsx(HeaderText, null, \"#\")), __jsx(Col, {\n    flex: \"1 1\"\n  }, __jsx(HeaderText, null, \"question\")), __jsx(Col, {\n    flex: \"0 0 80px\"\n  }, __jsx(HeaderText, null, \"wait\"))))), renderedQuestions === null || renderedQuestions === void 0 ? void 0 : renderedQuestions.map(function (question, index) {\n    return __jsx(StudentQueueCard, {\n      key: question.id,\n      rank: index + 1,\n      question: question,\n      highlighted: studentQuestion === question\n    });\n  }));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/Student/StudentQueueList.tsx"],"names":["API","ClosedQuestionStatus","OpenQuestionStatus","QuestionType","Card","Col","notification","Popconfirm","Row","Space","React","useCallback","useState","styled","mutate","useDraftQuestion","useLocalStorage","useQuestions","useQueue","useStudentQuestion","NotificationSettingsModal","QueueInfoColumn","QueueInfoColumnButton","QueuePageContainer","VerticalDivider","QuestionForm","StudentBanner","CantFindModal","StudentQueueCard","StudentRemovedFromQueueModal","JoinButton","StudentHeaderCard","HeaderText","div","CenterRow","StudentQueueList","qid","queue","mutateQueue","questions","questionsError","mutateQuestions","studentQuestion","studentQuestionIndex","isFirstQuestion","setIsFirstQuestion","notifModalOpen","setNotifModalOpen","showJoinPopconfirm","setShowJoinPopconfirm","deleteDraftQuestion","leaveQueue","update","id","status","ConfirmedDeleted","setIsJoining","rejoinQueue","Queued","finishQuestion","text","questionType","updateStudent","newQuestions","map","q","joinQueueAfterDeletion","create","queueId","isOnline","location","force","newQuestion","popupEditQuestion","setPopupEditQuestion","isJoining","openEditModal","closeEditModal","leaveQueueAndClose","joinQueueOpenModal","Number","Bug","createdQuestion","response","data","message","includes","finishQuestionAndClose","qt","warn","style","cursor","description","placement","duration","onClick","destroy","isOpen","marginTop","CantFind","allowQuestions","flexGrow","QueueHeader","h2","NoQuestionsText","QueueQuestions","renderedQuestions","filter","question","TADeleted","Helping","length","index"],"mappings":"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","sourcesContent":["import { API } from \"@koh/api-client\";\nimport {\n  ClosedQuestionStatus,\n  OpenQuestionStatus,\n  Question,\n  QuestionType,\n} from \"@koh/common\";\nimport { Card, Col, notification, Popconfirm, Row, Space } from \"antd\";\nimport React, { ReactElement, useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { mutate } from \"swr\";\nimport { useDraftQuestion } from \"../../../hooks/useDraftQuestion\";\nimport { useLocalStorage } from \"../../../hooks/useLocalStorage\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { useStudentQuestion } from \"../../../hooks/useStudentQuestion\";\nimport { NotificationSettingsModal } from \"../../Nav/NotificationSettingsModal\";\nimport {\n  QueueInfoColumn,\n  QueueInfoColumnButton,\n  QueuePageContainer,\n  VerticalDivider,\n} from \"../QueueListSharedComponents\";\nimport QuestionForm from \"./QuestionForm\";\nimport StudentBanner from \"./StudentBanner\";\nimport CantFindModal from \"./StudentCantFindModal\";\nimport StudentQueueCard from \"./StudentQueueCard\";\nimport StudentRemovedFromQueueModal from \"./StudentRemovedFromQueueModal\";\n\nconst JoinButton = styled(QueueInfoColumnButton)`\n  background-color: #3684c6;\n  color: white;\n`;\n\nconst StudentHeaderCard = styled(Card)`\n  height: 64px;\n  padding-left: 8px;\n  padding-right: 8px;\n  background: inherit;\n`;\n\nconst HeaderText = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 22px;\n  color: #8895a6;\n  font-variant: small-caps;\n`;\n\nconst CenterRow = styled(Row)`\n  align-items: center;\n`;\n\ninterface StudentQueueListProps {\n  qid: number;\n}\n\nexport default function StudentQueueList({\n  qid,\n}: StudentQueueListProps): ReactElement {\n  const { queue, mutateQueue } = useQueue(qid);\n  const { questions, questionsError, mutateQuestions } = useQuestions(qid);\n  const { studentQuestion, studentQuestionIndex } = useStudentQuestion(qid);\n  const [isFirstQuestion, setIsFirstQuestion] = useLocalStorage(\n    \"isFirstQuestion\",\n    true\n  );\n  const [notifModalOpen, setNotifModalOpen] = useState(false);\n  const [showJoinPopconfirm, setShowJoinPopconfirm] = useState(false);\n  const { deleteDraftQuestion } = useDraftQuestion();\n\n  const leaveQueue = useCallback(async () => {\n    await API.questions.update(studentQuestion?.id, {\n      status: ClosedQuestionStatus.ConfirmedDeleted,\n    });\n\n    setIsJoining(false);\n    await mutateQuestions();\n  }, [studentQuestion?.id, mutateQuestions]);\n\n  const rejoinQueue = useCallback(async () => {\n    await API.questions.update(studentQuestion?.id, {\n      status: OpenQuestionStatus.Queued,\n    });\n    await mutateQuestions();\n  }, [studentQuestion?.id, mutateQuestions]);\n\n  const finishQuestion = useCallback(\n    async (text: string, questionType: QuestionType) => {\n      const updateStudent = {\n        text,\n        questionType,\n        status: OpenQuestionStatus.Queued,\n      };\n      await API.questions.update(studentQuestion?.id, updateStudent);\n      const newQuestions = questions?.map((q: Question) =>\n        q.id === studentQuestion?.id ? { ...q, updateStudent } : q\n      );\n      mutateQuestions(newQuestions);\n    },\n    [questions, studentQuestion?.id, mutateQuestions]\n  );\n\n  const joinQueueAfterDeletion = useCallback(async () => {\n    await API.questions.update(studentQuestion?.id, {\n      status: ClosedQuestionStatus.ConfirmedDeleted,\n    });\n    await mutateQuestions();\n    const newQuestion = await API.questions.create({\n      text: studentQuestion.text,\n      questionType: studentQuestion?.questionType,\n      queueId: qid,\n      isOnline: studentQuestion?.isOnline,\n      location: studentQuestion?.location,\n      force: true,\n    });\n    await API.questions.update(newQuestion.id, {\n      status: OpenQuestionStatus.Queued,\n    });\n    await mutateQuestions();\n  }, [mutateQuestions, qid, studentQuestion]);\n\n  const [popupEditQuestion, setPopupEditQuestion] = useState(false);\n\n  const [isJoining, setIsJoining] = useState(\n    questions &&\n      studentQuestion &&\n      studentQuestion?.status !== OpenQuestionStatus.Queued\n  );\n\n  const openEditModal = useCallback(async () => {\n    mutate(`/api/v1/queues/${qid}/questions`);\n    setPopupEditQuestion(true);\n  }, [qid]);\n\n  const closeEditModal = useCallback(() => {\n    setPopupEditQuestion(false);\n    setIsJoining(false);\n  }, []);\n\n  const leaveQueueAndClose = useCallback(() => {\n    //delete draft when they leave the queue\n    deleteDraftQuestion();\n    leaveQueue();\n    closeEditModal();\n  }, [deleteDraftQuestion, leaveQueue, closeEditModal]);\n\n  const joinQueueOpenModal = useCallback(\n    async (force: boolean) => {\n      try {\n        const createdQuestion = await API.questions.create({\n          queueId: Number(qid),\n          text: \"\",\n          force: force,\n          questionType: QuestionType.Bug, // TODO: endpoint needs to be changed to allow empty questionType for drafts\n          // for the moment I am defaulting this data so that there is no error\n        });\n        const newQuestions = [...questions, createdQuestion];\n        await mutateQuestions(newQuestions);\n        setPopupEditQuestion(true);\n        return true;\n      } catch (e) {\n        if (\n          e.response?.data?.message?.includes(\n            \"You can't create more than one question at a time\"\n          )\n        ) {\n          return false;\n        }\n        return true;\n        // TODO: how should we handle error that happens for another reason?\n      }\n    },\n    [mutateQuestions, qid, questions]\n  );\n\n  const finishQuestionAndClose = useCallback(\n    (text: string, qt: QuestionType) => {\n      deleteDraftQuestion();\n      finishQuestion(text, qt);\n      closeEditModal();\n      if (isFirstQuestion) {\n        notification.warn({\n          style: { cursor: \"pointer\" },\n          message: \"Enable Notifications\",\n          description:\n            \"Turn on notifications for when it's almost your turn to get help.\",\n          placement: \"bottomRight\",\n          duration: 0,\n          onClick: () => {\n            notification.destroy();\n            setNotifModalOpen(true);\n            setIsFirstQuestion(false);\n          },\n        });\n      }\n    },\n    [\n      deleteDraftQuestion,\n      finishQuestion,\n      closeEditModal,\n      isFirstQuestion,\n      setIsFirstQuestion,\n    ]\n  );\n\n  if (queue && questions) {\n    if (!queue.isOpen) {\n      return <h1 style={{ marginTop: \"50px\" }}>The Queue is Closed!</h1>;\n    }\n    return (\n      <>\n        <QueuePageContainer>\n          <CantFindModal\n            visible={studentQuestion?.status === OpenQuestionStatus.CantFind}\n            leaveQueue={leaveQueue}\n            rejoinQueue={rejoinQueue}\n          />\n          <StudentRemovedFromQueueModal\n            question={studentQuestion}\n            leaveQueue={leaveQueue}\n            joinQueue={joinQueueAfterDeletion}\n          />\n          <QueueInfoColumn\n            queueId={qid}\n            buttons={\n              !studentQuestion && (\n                <Popconfirm\n                  title=\"In order to join this queue, you must delete your previous question. Do you want to continue?\"\n                  onConfirm={() => joinQueueOpenModal(true)}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                  disabled\n                  visible={showJoinPopconfirm}\n                  onVisibleChange={setShowJoinPopconfirm}\n                >\n                  <JoinButton\n                    type=\"primary\"\n                    disabled={!queue?.allowQuestions}\n                    data-cy=\"join-queue-button\"\n                    onClick={async () =>\n                      setShowJoinPopconfirm(!(await joinQueueOpenModal(false)))\n                    }\n                  >\n                    Join Queue\n                  </JoinButton>\n                </Popconfirm>\n              )\n            }\n          />\n          <VerticalDivider />\n          <Space direction=\"vertical\" size={40} style={{ flexGrow: 1 }}>\n            {studentQuestion && (\n              <StudentBanner\n                queueId={qid}\n                editQuestion={openEditModal}\n                leaveQueue={leaveQueue}\n              />\n            )}\n            <QueueQuestions\n              questions={questions}\n              studentQuestion={studentQuestion}\n            />\n          </Space>\n        </QueuePageContainer>\n\n        <QuestionForm\n          visible={\n            (questions && !studentQuestion && isJoining) ||\n            // && studentQuestion.status !== QuestionStatusKeys.Drafting)\n            popupEditQuestion\n          }\n          question={studentQuestion}\n          leaveQueue={leaveQueueAndClose}\n          finishQuestion={finishQuestionAndClose}\n          position={studentQuestionIndex + 1}\n          cancel={closeEditModal}\n        />\n        <NotificationSettingsModal\n          visible={notifModalOpen}\n          onClose={() => setNotifModalOpen(false)}\n        />\n      </>\n    );\n  } else {\n    return <div />;\n  }\n}\n\nconst QueueHeader = styled.h2`\n  font-weight: 500;\n  font-size: 24px;\n  color: #212934;\n  margin-bottom: 0;\n`;\n\nconst NoQuestionsText = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  color: #212934;\n`;\n\n// I think we could share this with the TA\ninterface QueueProps {\n  questions: Question[];\n  studentQuestion: Question;\n}\nfunction QueueQuestions({ questions, studentQuestion }: QueueProps) {\n  const renderedQuestions = questions?.filter(\n    (question) =>\n      question.status !== OpenQuestionStatus.TADeleted &&\n      question.status !== OpenQuestionStatus.Helping &&\n      question.status !== OpenQuestionStatus.CantFind\n  );\n  return (\n    <div data-cy=\"queueQuestions\">\n      {renderedQuestions?.length === 0 ? (\n        <NoQuestionsText>There are no questions in the queue</NoQuestionsText>\n      ) : (\n        <>\n          <QueueHeader>Queue</QueueHeader>\n          <StudentHeaderCard bordered={false}>\n            <CenterRow>\n              <Col flex=\"0 0 64px\">\n                <HeaderText>#</HeaderText>\n              </Col>\n              <Col flex=\"1 1\">\n                <HeaderText>question</HeaderText>\n              </Col>\n              <Col flex=\"0 0 80px\">\n                <HeaderText>wait</HeaderText>\n              </Col>\n            </CenterRow>\n          </StudentHeaderCard>\n        </>\n      )}\n      {renderedQuestions?.map((question: Question, index: number) => {\n        return (\n          <StudentQueueCard\n            key={question.id}\n            rank={index + 1}\n            question={question}\n            highlighted={studentQuestion === question}\n          />\n        );\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}