{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { API } from \"@koh/api-client\";\nimport { OpenQuestionStatus, QuestionStatusKeys } from \"@koh/common\";\nimport { Card, Col, Row, Space, Tooltip, notification } from \"antd\";\nimport { useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { EditQueueModal } from \"./EditQueueModal\";\nimport { QueueInfoColumn, QueueInfoColumnButton, QueuePageContainer, VerticalDivider } from \"../QueueListSharedComponents\";\nimport StudentPopupCard from \"./StudentPopupCard\";\nimport TABanner from \"./TABanner\";\nimport TAQueueCard from \"./TAQueueCard\";\nimport { NotificationSettingsModal } from \"../../Nav/NotificationSettingsModal\";\nvar StatusText = styled.div.withConfig({\n  displayName: \"TAQueueList__StatusText\",\n  componentId: \"sc-1dyac0n-0\"\n})([\"font-size:14px;font-weight:500;line-height:22px;color:#8895a6;font-variant:small-caps;width:96px;float:right;margin-right:0;\"]);\nvar TAHeaderCard = styled(Card).withConfig({\n  displayName: \"TAQueueList__TAHeaderCard\",\n  componentId: \"sc-1dyac0n-1\"\n})([\"height:64px;background:inherit;\"]);\nvar HeaderText = styled.div.withConfig({\n  displayName: \"TAQueueList__HeaderText\",\n  componentId: \"sc-1dyac0n-2\"\n})([\"font-size:14px;font-weight:500;line-height:22px;color:#8895a6;font-variant:small-caps;\"]);\nvar CenterRow = styled(Row).withConfig({\n  displayName: \"TAQueueList__CenterRow\",\n  componentId: \"sc-1dyac0n-3\"\n})([\"align-items:center;justify-content:space-between;\"]);\nvar Placeholder = styled.div.withConfig({\n  displayName: \"TAQueueList__Placeholder\",\n  componentId: \"sc-1dyac0n-4\"\n})([\"width:14px;\"]);\nvar CheckOutButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__CheckOutButton\",\n  componentId: \"sc-1dyac0n-5\"\n})([\"color:#da3236;\"]);\nvar CheckInButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__CheckInButton\",\n  componentId: \"sc-1dyac0n-6\"\n})([\"color:white;background:#2a9187;\"]);\nvar HelpNextButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__HelpNextButton\",\n  componentId: \"sc-1dyac0n-7\"\n})([\"color:white;background:#2a9187;&:hover,&:focus{color:white;background:#39aca1;}\"]);\nvar EditQueueButton = styled(QueueInfoColumnButton).withConfig({\n  displayName: \"TAQueueList__EditQueueButton\",\n  componentId: \"sc-1dyac0n-8\"\n})([\"color:#212934;\"]);\nexport default function TAQueueList(_ref) {\n  var qid = _ref.qid,\n      courseId = _ref.courseId;\n  var user = useProfile();\n\n  var _useQueue = useQueue(qid),\n      queue = _useQueue.queue,\n      mutateQueue = _useQueue.mutateQueue;\n\n  var _useQuestions = useQuestions(qid),\n      questions = _useQuestions.questions,\n      questionsError = _useQuestions.questionsError,\n      mutateQuestions = _useQuestions.mutateQuestions;\n\n  var renderedQuestions = questions === null || questions === void 0 ? void 0 : questions.filter(function (question) {\n    return question.status !== OpenQuestionStatus.TADeleted && question.status !== OpenQuestionStatus.Helping;\n  });\n  var helpingQuestion = questions === null || questions === void 0 ? void 0 : questions.find(function (question) {\n    var _question$taHelped;\n\n    return question.status === OpenQuestionStatus.Helping && ((_question$taHelped = question.taHelped) === null || _question$taHelped === void 0 ? void 0 : _question$taHelped.id) === user.id;\n  });\n  var isHelping = !!helpingQuestion;\n\n  var _useState = useState(false),\n      openPopup = _useState[0],\n      setOpenPopup = _useState[1];\n\n  var _useState2 = useState(false),\n      queueSettingsModal = _useState2[0],\n      setQueueSettingsModal = _useState2[1];\n\n  var _useState3 = useState(null),\n      currentQuestion = _useState3[0],\n      setCurrentQuestion = _useState3[1]; // Close popup if currentQuestion no longer exists in the cache\n\n\n  if (currentQuestion && !questions.includes(currentQuestion)) {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }\n\n  var onOpenCard = useCallback(function (question) {\n    setCurrentQuestion(question);\n    setOpenPopup(true);\n  }, []);\n  var onCloseClick = useCallback(function () {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }, []);\n\n  var updateQuestionTA = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(question, status) {\n      var _e$response, _e$response2, _e$response2$data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return API.questions.update(question.id, {\n                status: status\n              });\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (((_e$response = _context.t0.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 401 && ((_e$response2 = _context.t0.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.message) === \"Another TA is currently helping with this question\") {\n                notification.open({\n                  message: \"Another TA is currently helping the student\",\n                  description: \"This happens when another TA clicks help at the exact same time\",\n                  type: \"error\",\n                  duration: 3,\n                  className: \"hide-in-percy\",\n                  style: {\n                    width: 450\n                  }\n                });\n              }\n\n            case 8:\n              mutateQuestions();\n              setOpenPopup(false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 5]]);\n    }));\n\n    return function updateQuestionTA(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var isStaffCheckedIn = queue === null || queue === void 0 ? void 0 : queue.staffList.some(function (e) {\n    return e.id === (user === null || user === void 0 ? void 0 : user.id);\n  });\n\n  var helpNext = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var nextQuestion;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              nextQuestion = questions.find(function (question) {\n                return question.status === QuestionStatusKeys.Queued;\n              });\n              _context2.next = 3;\n              return updateQuestionTA(nextQuestion, OpenQuestionStatus.Helping);\n\n            case 3:\n              window.open(\"https://teams.microsoft.com/l/chat/0/0?users=\".concat(nextQuestion.creator.email));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function helpNext() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  if (queue && questions) {\n    return __jsx(React.Fragment, null, __jsx(QueuePageContainer, null, __jsx(QueueInfoColumn, {\n      queueId: qid,\n      buttons: __jsx(React.Fragment, null, __jsx(EditQueueButton, {\n        \"data-cy\": \"editQueue\",\n        onClick: function onClick() {\n          return setQueueSettingsModal(true);\n        }\n      }, \"Edit Queue Details\"), __jsx(Tooltip, {\n        title: !isStaffCheckedIn && \"You must check in to help students!\"\n      }, __jsx(HelpNextButton, {\n        onClick: helpNext,\n        disabled: !isStaffCheckedIn || !questions.find(function (q) {\n          return q.status === QuestionStatusKeys.Queued;\n        }) || isHelping,\n        \"data-cy\": \"help-next\"\n      }, \"Help Next\")), isStaffCheckedIn ? __jsx(CheckOutButton, {\n        danger: true,\n        disabled: isHelping,\n        \"data-cy\": \"check-out-button\",\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return API.taStatus.checkOut(courseId, queue === null || queue === void 0 ? void 0 : queue.room);\n\n                case 2:\n                  mutateQueue();\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }))\n      }, \"Check Out\") : __jsx(CheckInButton, {\n        onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return API.taStatus.checkIn(courseId, queue === null || queue === void 0 ? void 0 : queue.room);\n\n                case 2:\n                  mutateQueue();\n\n                case 3:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        })),\n        \"data-cy\": \"check-in-button\"\n      }, \"Check In\"))\n    }), __jsx(VerticalDivider, null), __jsx(Space, {\n      direction: \"vertical\",\n      size: 40,\n      style: {\n        flexGrow: 1\n      }\n    }, isHelping && __jsx(TABanner, {\n      helpingQuestion: helpingQuestion,\n      updateQuestion: updateQuestionTA\n    }), __jsx(QueueQuestions, {\n      questions: renderedQuestions,\n      isHelping: isHelping,\n      onOpenCard: onOpenCard\n    }))), currentQuestion && __jsx(StudentPopupCard, {\n      onClose: onCloseClick,\n      question: currentQuestion,\n      visible: openPopup,\n      updateQuestion: updateQuestionTA,\n      isStaffCheckedIn: isStaffCheckedIn\n    }), __jsx(EditQueueModal, {\n      queueId: qid,\n      visible: queueSettingsModal,\n      onClose: function onClose() {\n        return setQueueSettingsModal(false);\n      }\n    }));\n  } else {\n    return __jsx(\"div\", null);\n  }\n}\nvar QueueHeader = styled.h2.withConfig({\n  displayName: \"TAQueueList__QueueHeader\",\n  componentId: \"sc-1dyac0n-9\"\n})([\"font-weight:500;font-size:24px;color:#212934;margin-bottom:0;\"]);\nvar NoQuestionsText = styled.div.withConfig({\n  displayName: \"TAQueueList__NoQuestionsText\",\n  componentId: \"sc-1dyac0n-10\"\n})([\"font-weight:500;font-size:24px;color:#212934;\"]);\n\nfunction NotifReminderButton() {\n  var _useState4 = useState(false),\n      isNotifOpen = _useState4[0],\n      setIsNotifOpen = _useState4[1];\n\n  var NotifRemindButton = styled(QueueInfoColumnButton).withConfig({\n    displayName: \"TAQueueList__NotifRemindButton\",\n    componentId: \"sc-1dyac0n-11\"\n  })([\"margin-top:16px;border-radius:6px;background:#fff;\"]);\n  return __jsx(React.Fragment, null, __jsx(NotifRemindButton, {\n    onClick: function onClick(e) {\n      return setIsNotifOpen(true);\n    }\n  }, \"Sign Up for Notifications\"), isNotifOpen && __jsx(NotificationSettingsModal, {\n    visible: isNotifOpen,\n    onClose: function onClose() {\n      return setIsNotifOpen(false);\n    }\n  }));\n}\n\nfunction QueueQuestions(_ref6) {\n  var questions = _ref6.questions,\n      isHelping = _ref6.isHelping,\n      onOpenCard = _ref6.onOpenCard;\n\n  var _useProfile = useProfile(),\n      phoneNotifsEnabled = _useProfile.phoneNotifsEnabled,\n      desktopNotifsEnabled = _useProfile.desktopNotifsEnabled;\n\n  return __jsx(\"div\", {\n    \"data-cy\": \"queueQuestions\"\n  }, questions.length === 0 ? __jsx(React.Fragment, null, __jsx(NoQuestionsText, null, \"There are no questions in the queue\"), !isHelping && !phoneNotifsEnabled && !desktopNotifsEnabled && __jsx(NotifReminderButton, null)) : __jsx(React.Fragment, null, __jsx(QueueHeader, null, \"Queue\"), __jsx(TAHeaderCard, {\n    bordered: false\n  }, __jsx(CenterRow, {\n    justify: \"space-between\"\n  }, __jsx(Col, {\n    xs: 2,\n    lg: 1\n  }, __jsx(HeaderText, null, \"#\")), __jsx(Col, {\n    xs: 14,\n    sm: 11,\n    lg: 5\n  }, __jsx(HeaderText, null, \"name\")), __jsx(Col, {\n    xs: 0,\n    lg: 2\n  }, __jsx(HeaderText, null, \"type\")), __jsx(Col, {\n    xs: 0,\n    lg: 7\n  }, __jsx(HeaderText, null, \"question\")), __jsx(Col, {\n    xs: 0,\n    lg: 2\n  }, __jsx(HeaderText, null, \"wait\")), __jsx(Col, {\n    span: 2\n  }, __jsx(StatusText, null, \"status\")), __jsx(Col, null, __jsx(Placeholder, null))))), questions.map(function (question, index) {\n    return __jsx(TAQueueCard, {\n      key: question.id,\n      rank: index + 1,\n      question: question,\n      onOpen: function onOpen(q) {\n        return !isHelping && onOpenCard(q);\n      }\n    });\n  }));\n}","map":{"version":3,"sources":["/home/runner/work/office-hours/office-hours/packages/app/components/Queue/TA/TAQueueList.tsx"],"names":["API","OpenQuestionStatus","QuestionStatusKeys","Card","Col","Row","Space","Tooltip","notification","useCallback","useState","styled","useProfile","useQuestions","useQueue","EditQueueModal","QueueInfoColumn","QueueInfoColumnButton","QueuePageContainer","VerticalDivider","StudentPopupCard","TABanner","TAQueueCard","NotificationSettingsModal","StatusText","div","TAHeaderCard","HeaderText","CenterRow","Placeholder","CheckOutButton","CheckInButton","HelpNextButton","EditQueueButton","TAQueueList","qid","courseId","user","queue","mutateQueue","questions","questionsError","mutateQuestions","renderedQuestions","filter","question","status","TADeleted","Helping","helpingQuestion","find","taHelped","id","isHelping","openPopup","setOpenPopup","queueSettingsModal","setQueueSettingsModal","currentQuestion","setCurrentQuestion","includes","onOpenCard","onCloseClick","updateQuestionTA","update","response","data","message","open","description","type","duration","className","style","width","isStaffCheckedIn","staffList","some","e","helpNext","nextQuestion","Queued","window","creator","email","q","taStatus","checkOut","room","checkIn","flexGrow","QueueHeader","h2","NoQuestionsText","NotifReminderButton","isNotifOpen","setIsNotifOpen","NotifRemindButton","QueueQuestions","phoneNotifsEnabled","desktopNotifsEnabled","length","map","index"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,iBAApB;AACA,SACEC,kBADF,EAIEC,kBAJF,QAKO,aALP;AAMA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,OAAhC,EAAyCC,YAAzC,QAA6D,MAA7D;AACA,SAAuBC,WAAvB,EAAoCC,QAApC,QAAoD,OAApD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SACEC,eADF,EAEEC,qBAFF,EAGEC,kBAHF,EAIEC,eAJF,QAKO,8BALP;AAMA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,yBAAT,QAA0C,qCAA1C;AAEA,IAAMC,UAAU,GAAGb,MAAM,CAACc,GAAV;AAAA;AAAA;AAAA,oIAAhB;AAWA,IAAMC,YAAY,GAAGf,MAAM,CAACR,IAAD,CAAT;AAAA;AAAA;AAAA,uCAAlB;AAKA,IAAMwB,UAAU,GAAGhB,MAAM,CAACc,GAAV;AAAA;AAAA;AAAA,8FAAhB;AAQA,IAAMG,SAAS,GAAGjB,MAAM,CAACN,GAAD,CAAT;AAAA;AAAA;AAAA,yDAAf;AAKA,IAAMwB,WAAW,GAAGlB,MAAM,CAACc,GAAV;AAAA;AAAA;AAAA,mBAAjB;AAIA,IAAMK,cAAc,GAAGnB,MAAM,CAACM,qBAAD,CAAT;AAAA;AAAA;AAAA,sBAApB;AAIA,IAAMc,aAAa,GAAGpB,MAAM,CAACM,qBAAD,CAAT;AAAA;AAAA;AAAA,uCAAnB;AAKA,IAAMe,cAAc,GAAGrB,MAAM,CAACM,qBAAD,CAAT;AAAA;AAAA;AAAA,uFAApB;AAUA,IAAMgB,eAAe,GAAGtB,MAAM,CAACM,qBAAD,CAAT;AAAA;AAAA;AAAA,sBAArB;AASA,eAAe,SAASiB,WAAT,OAGoB;AAAA,MAFjCC,GAEiC,QAFjCA,GAEiC;AAAA,MADjCC,QACiC,QADjCA,QACiC;AACjC,MAAMC,IAAI,GAAGzB,UAAU,EAAvB;;AADiC,kBAGFE,QAAQ,CAACqB,GAAD,CAHN;AAAA,MAGzBG,KAHyB,aAGzBA,KAHyB;AAAA,MAGlBC,WAHkB,aAGlBA,WAHkB;;AAAA,sBAKsB1B,YAAY,CAACsB,GAAD,CALlC;AAAA,MAKzBK,SALyB,iBAKzBA,SALyB;AAAA,MAKdC,cALc,iBAKdA,cALc;AAAA,MAKEC,eALF,iBAKEA,eALF;;AAOjC,MAAMC,iBAAiB,GAAGH,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEI,MAAX,CACxB,UAACC,QAAD;AAAA,WACEA,QAAQ,CAACC,MAAT,KAAoB7C,kBAAkB,CAAC8C,SAAvC,IACAF,QAAQ,CAACC,MAAT,KAAoB7C,kBAAkB,CAAC+C,OAFzC;AAAA,GADwB,CAA1B;AAMA,MAAMC,eAAyB,GAAGT,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEU,IAAX,CAChC,UAACL,QAAD;AAAA;;AAAA,WACEA,QAAQ,CAACC,MAAT,KAAoB7C,kBAAkB,CAAC+C,OAAvC,IACA,uBAAAH,QAAQ,CAACM,QAAT,0EAAmBC,EAAnB,MAA0Bf,IAAI,CAACe,EAFjC;AAAA,GADgC,CAAlC;AAKA,MAAMC,SAAS,GAAG,CAAC,CAACJ,eAApB;;AAlBiC,kBAoBCvC,QAAQ,CAAU,KAAV,CApBT;AAAA,MAoB1B4C,SApB0B;AAAA,MAoBfC,YApBe;;AAAA,mBAqBmB7C,QAAQ,CAAC,KAAD,CArB3B;AAAA,MAqB1B8C,kBArB0B;AAAA,MAqBNC,qBArBM;;AAAA,mBAsBa/C,QAAQ,CAAW,IAAX,CAtBrB;AAAA,MAsB1BgD,eAtB0B;AAAA,MAsBTC,kBAtBS,kBAwBjC;;;AACA,MAAID,eAAe,IAAI,CAAClB,SAAS,CAACoB,QAAV,CAAmBF,eAAnB,CAAxB,EAA6D;AAC3DC,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;;AAED,MAAMM,UAAU,GAAGpD,WAAW,CAAC,UAACoC,QAAD,EAA8B;AAC3Dc,IAAAA,kBAAkB,CAACd,QAAD,CAAlB;AACAU,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAH6B,EAG3B,EAH2B,CAA9B;AAKA,MAAMO,YAAY,GAAGrD,WAAW,CAAC,YAAY;AAC3CkD,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAH+B,EAG7B,EAH6B,CAAhC;;AAKA,MAAMQ,gBAAgB;AAAA,yEAAG,iBACvBlB,QADuB,EAEvBC,MAFuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKf9C,GAAG,CAACwC,SAAJ,CAAcwB,MAAd,CAAqBnB,QAAQ,CAACO,EAA9B,EAAkC;AACtCN,gBAAAA,MAAM,EAAEA;AAD8B,eAAlC,CALe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AASrB,kBACE,4BAAEmB,QAAF,4DAAYnB,MAAZ,MAAuB,GAAvB,IACA,6BAAEmB,QAAF,mFAAYC,IAAZ,wEAAkBC,OAAlB,MACE,oDAHJ,EAIE;AACA3D,gBAAAA,YAAY,CAAC4D,IAAb,CAAkB;AAChBD,kBAAAA,OAAO,EAAE,6CADO;AAEhBE,kBAAAA,WAAW,EACT,iEAHc;AAIhBC,kBAAAA,IAAI,EAAE,OAJU;AAKhBC,kBAAAA,QAAQ,EAAE,CALM;AAMhBC,kBAAAA,SAAS,EAAE,eANK;AAOhBC,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,KAAK,EAAE;AADF;AAPS,iBAAlB;AAWD;;AAzBoB;AA2BvBhC,cAAAA,eAAe;AACfa,cAAAA,YAAY,CAAC,KAAD,CAAZ;;AA5BuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBQ,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AA+BA,MAAMY,gBAAgB,GAAGrC,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEsC,SAAP,CAAiBC,IAAjB,CAAsB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAAC1B,EAAF,MAASf,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEe,EAAf,CAAP;AAAA,GAAtB,CAAzB;;AAEA,MAAM2B,QAAQ;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,cAAAA,YADS,GACMxC,SAAS,CAACU,IAAV,CACnB,UAACL,QAAD;AAAA,uBAAcA,QAAQ,CAACC,MAAT,KAAoB5C,kBAAkB,CAAC+E,MAArD;AAAA,eADmB,CADN;AAAA;AAAA,qBAKTlB,gBAAgB,CAACiB,YAAD,EAAe/E,kBAAkB,CAAC+C,OAAlC,CALP;;AAAA;AAMfkC,cAAAA,MAAM,CAACd,IAAP,wDACkDY,YAAY,CAACG,OAAb,CAAqBC,KADvE;;AANe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARL,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAWA,MAAIzC,KAAK,IAAIE,SAAb,EAAwB;AACtB,WACE,4BACE,MAAC,kBAAD,QACE,MAAC,eAAD;AACE,MAAA,OAAO,EAAEL,GADX;AAEE,MAAA,OAAO,EACL,4BACE,MAAC,eAAD;AACE,mBAAQ,WADV;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAMsB,qBAAqB,CAAC,IAAD,CAA3B;AAAA;AAFX,8BADF,EAOE,MAAC,OAAD;AACE,QAAA,KAAK,EACH,CAACkB,gBAAD,IAAqB;AAFzB,SAKE,MAAC,cAAD;AACE,QAAA,OAAO,EAAEI,QADX;AAEE,QAAA,QAAQ,EACN,CAACJ,gBAAD,IACA,CAACnC,SAAS,CAACU,IAAV,CACC,UAACmC,CAAD;AAAA,iBAAOA,CAAC,CAACvC,MAAF,KAAa5C,kBAAkB,CAAC+E,MAAvC;AAAA,SADD,CADD,IAIA5B,SAPJ;AASE,mBAAQ;AATV,qBALF,CAPF,EA0BGsB,gBAAgB,GACf,MAAC,cAAD;AACE,QAAA,MAAM,MADR;AAEE,QAAA,QAAQ,EAAEtB,SAFZ;AAGE,mBAAQ,kBAHV;AAIE,QAAA,OAAO,wEAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACDrD,GAAG,CAACsF,QAAJ,CAAaC,QAAb,CAAsBnD,QAAtB,EAAgCE,KAAhC,aAAgCA,KAAhC,uBAAgCA,KAAK,CAAEkD,IAAvC,CADC;;AAAA;AAEPjD,kBAAAA,WAAW;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;AAJT,qBADe,GAaf,MAAC,aAAD;AACE,QAAA,OAAO,wEAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACDvC,GAAG,CAACsF,QAAJ,CAAaG,OAAb,CAAqBrD,QAArB,EAA+BE,KAA/B,aAA+BA,KAA/B,uBAA+BA,KAAK,CAAEkD,IAAtC,CADC;;AAAA;AAEPjD,kBAAAA,WAAW;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF,EADT;AAKE,mBAAQ;AALV,oBAvCJ;AAHJ,MADF,EAwDE,MAAC,eAAD,OAxDF,EAyDE,MAAC,KAAD;AAAO,MAAA,SAAS,EAAC,UAAjB;AAA4B,MAAA,IAAI,EAAE,EAAlC;AAAsC,MAAA,KAAK,EAAE;AAAEmD,QAAAA,QAAQ,EAAE;AAAZ;AAA7C,OACGrC,SAAS,IACR,MAAC,QAAD;AACE,MAAA,eAAe,EAAEJ,eADnB;AAEE,MAAA,cAAc,EAAEc;AAFlB,MAFJ,EAOE,MAAC,cAAD;AACE,MAAA,SAAS,EAAEpB,iBADb;AAEE,MAAA,SAAS,EAAEU,SAFb;AAGE,MAAA,UAAU,EAAEQ;AAHd,MAPF,CAzDF,CADF,EAwEGH,eAAe,IACd,MAAC,gBAAD;AACE,MAAA,OAAO,EAAEI,YADX;AAEE,MAAA,QAAQ,EAAEJ,eAFZ;AAGE,MAAA,OAAO,EAAEJ,SAHX;AAIE,MAAA,cAAc,EAAES,gBAJlB;AAKE,MAAA,gBAAgB,EAAEY;AALpB,MAzEJ,EAiFE,MAAC,cAAD;AACE,MAAA,OAAO,EAAExC,GADX;AAEE,MAAA,OAAO,EAAEqB,kBAFX;AAGE,MAAA,OAAO,EAAE;AAAA,eAAMC,qBAAqB,CAAC,KAAD,CAA3B;AAAA;AAHX,MAjFF,CADF;AAyFD,GA1FD,MA0FO;AACL,WAAO,kBAAP;AACD;AACF;AAED,IAAMkC,WAAW,GAAGhF,MAAM,CAACiF,EAAV;AAAA;AAAA;AAAA,qEAAjB;AAOA,IAAMC,eAAe,GAAGlF,MAAM,CAACc,GAAV;AAAA;AAAA;AAAA,qDAArB;;AAMA,SAASqE,mBAAT,GAA+B;AAAA,mBACSpF,QAAQ,CAAC,KAAD,CADjB;AAAA,MACtBqF,WADsB;AAAA,MACTC,cADS;;AAE7B,MAAMC,iBAAiB,GAAGtF,MAAM,CAACM,qBAAD,CAAT;AAAA;AAAA;AAAA,4DAAvB;AAMA,SACE,4BACE,MAAC,iBAAD;AAAmB,IAAA,OAAO,EAAE,iBAAC6D,CAAD;AAAA,aAAOkB,cAAc,CAAC,IAAD,CAArB;AAAA;AAA5B,iCADF,EAIGD,WAAW,IACV,MAAC,yBAAD;AACE,IAAA,OAAO,EAAEA,WADX;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMC,cAAc,CAAC,KAAD,CAApB;AAAA;AAFX,IALJ,CADF;AAaD;;AAOD,SAASE,cAAT,QAA0E;AAAA,MAAhD1D,SAAgD,SAAhDA,SAAgD;AAAA,MAArCa,SAAqC,SAArCA,SAAqC;AAAA,MAA1BQ,UAA0B,SAA1BA,UAA0B;;AAAA,oBACnBjD,UAAU,EADS;AAAA,MAChEuF,kBADgE,eAChEA,kBADgE;AAAA,MAC5CC,oBAD4C,eAC5CA,oBAD4C;;AAExE,SACE;AAAK,eAAQ;AAAb,KACG5D,SAAS,CAAC6D,MAAV,KAAqB,CAArB,GACC,4BACE,MAAC,eAAD,8CADF,EAEG,CAAChD,SAAD,IAAc,CAAC8C,kBAAf,IAAqC,CAACC,oBAAtC,IACC,MAAC,mBAAD,OAHJ,CADD,GAQC,4BACE,MAAC,WAAD,gBADF,EAEE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAE;AAAxB,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAC;AAAnB,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE;AAAhB,KACE,MAAC,UAAD,YADF,CADF,EAIE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,EAAE,EAAE,EAAjB;AAAqB,IAAA,EAAE,EAAE;AAAzB,KACE,MAAC,UAAD,eADF,CAJF,EAOE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE;AAAhB,KACE,MAAC,UAAD,eADF,CAPF,EAUE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE;AAAhB,KACE,MAAC,UAAD,mBADF,CAVF,EAaE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE;AAAhB,KACE,MAAC,UAAD,eADF,CAbF,EAgBE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAE;AAAX,KACE,MAAC,UAAD,iBADF,CAhBF,EAmBE,MAAC,GAAD,QACE,MAAC,WAAD,OADF,CAnBF,CADF,CAFF,CATJ,EAsCG5D,SAAS,CAAC8D,GAAV,CAAc,UAACzD,QAAD,EAAqB0D,KAArB;AAAA,WACb,MAAC,WAAD;AACE,MAAA,GAAG,EAAE1D,QAAQ,CAACO,EADhB;AAEE,MAAA,IAAI,EAAEmD,KAAK,GAAG,CAFhB;AAGE,MAAA,QAAQ,EAAE1D,QAHZ;AAIE,MAAA,MAAM,EAAE,gBAACwC,CAAD;AAAA,eAAO,CAAChC,SAAD,IAAcQ,UAAU,CAACwB,CAAD,CAA/B;AAAA;AAJV,MADa;AAAA,GAAd,CAtCH,CADF;AAiDD","sourcesContent":["import { API } from \"@koh/api-client\";\nimport {\n  OpenQuestionStatus,\n  Question,\n  QuestionStatus,\n  QuestionStatusKeys,\n} from \"@koh/common\";\nimport { Card, Col, Row, Space, Tooltip, notification } from \"antd\";\nimport { ReactElement, useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useProfile } from \"../../../hooks/useProfile\";\nimport { useQuestions } from \"../../../hooks/useQuestions\";\nimport { useQueue } from \"../../../hooks/useQueue\";\nimport { EditQueueModal } from \"./EditQueueModal\";\nimport {\n  QueueInfoColumn,\n  QueueInfoColumnButton,\n  QueuePageContainer,\n  VerticalDivider,\n} from \"../QueueListSharedComponents\";\nimport StudentPopupCard from \"./StudentPopupCard\";\nimport TABanner from \"./TABanner\";\nimport TAQueueCard from \"./TAQueueCard\";\nimport { NotificationSettingsModal } from \"../../Nav/NotificationSettingsModal\";\n\nconst StatusText = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 22px;\n  color: #8895a6;\n  font-variant: small-caps;\n  width: 96px;\n  float: right;\n  margin-right: 0;\n`;\n\nconst TAHeaderCard = styled(Card)`\n  height: 64px;\n  background: inherit;\n`;\n\nconst HeaderText = styled.div`\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 22px;\n  color: #8895a6;\n  font-variant: small-caps;\n`;\n\nconst CenterRow = styled(Row)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Placeholder = styled.div`\n  width: 14px;\n`;\n\nconst CheckOutButton = styled(QueueInfoColumnButton)`\n  color: #da3236;\n`;\n\nconst CheckInButton = styled(QueueInfoColumnButton)`\n  color: white;\n  background: #2a9187;\n`;\n\nconst HelpNextButton = styled(QueueInfoColumnButton)`\n  color: white;\n  background: #2a9187;\n  &:hover,\n  &:focus {\n    color: white;\n    background: #39aca1;\n  }\n`;\n\nconst EditQueueButton = styled(QueueInfoColumnButton)`\n  color: #212934;\n`;\n\ninterface TAQueueListProps {\n  qid: number;\n  courseId: number;\n}\n\nexport default function TAQueueList({\n  qid,\n  courseId,\n}: TAQueueListProps): ReactElement {\n  const user = useProfile();\n\n  const { queue, mutateQueue } = useQueue(qid);\n\n  const { questions, questionsError, mutateQuestions } = useQuestions(qid);\n\n  const renderedQuestions = questions?.filter(\n    (question) =>\n      question.status !== OpenQuestionStatus.TADeleted &&\n      question.status !== OpenQuestionStatus.Helping\n  );\n\n  const helpingQuestion: Question = questions?.find(\n    (question) =>\n      question.status === OpenQuestionStatus.Helping &&\n      question.taHelped?.id === user.id\n  );\n  const isHelping = !!helpingQuestion;\n\n  const [openPopup, setOpenPopup] = useState<boolean>(false);\n  const [queueSettingsModal, setQueueSettingsModal] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState<Question>(null);\n\n  // Close popup if currentQuestion no longer exists in the cache\n  if (currentQuestion && !questions.includes(currentQuestion)) {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }\n\n  const onOpenCard = useCallback((question: Question): void => {\n    setCurrentQuestion(question);\n    setOpenPopup(true);\n  }, []);\n\n  const onCloseClick = useCallback((): void => {\n    setCurrentQuestion(null);\n    setOpenPopup(false);\n  }, []);\n\n  const updateQuestionTA = async (\n    question: Question,\n    status: QuestionStatus\n  ) => {\n    try {\n      await API.questions.update(question.id, {\n        status: status,\n      });\n    } catch (e) {\n      if (\n        e.response?.status === 401 &&\n        e.response?.data?.message ===\n          \"Another TA is currently helping with this question\"\n      ) {\n        notification.open({\n          message: \"Another TA is currently helping the student\",\n          description:\n            \"This happens when another TA clicks help at the exact same time\",\n          type: \"error\",\n          duration: 3,\n          className: \"hide-in-percy\",\n          style: {\n            width: 450,\n          },\n        });\n      }\n    }\n    mutateQuestions();\n    setOpenPopup(false);\n  };\n\n  const isStaffCheckedIn = queue?.staffList.some((e) => e.id === user?.id);\n\n  const helpNext = async () => {\n    const nextQuestion = questions.find(\n      (question) => question.status === QuestionStatusKeys.Queued\n    );\n\n    await updateQuestionTA(nextQuestion, OpenQuestionStatus.Helping);\n    window.open(\n      `https://teams.microsoft.com/l/chat/0/0?users=${nextQuestion.creator.email}`\n    );\n  };\n\n  if (queue && questions) {\n    return (\n      <>\n        <QueuePageContainer>\n          <QueueInfoColumn\n            queueId={qid}\n            buttons={\n              <>\n                <EditQueueButton\n                  data-cy=\"editQueue\"\n                  onClick={() => setQueueSettingsModal(true)}\n                >\n                  Edit Queue Details\n                </EditQueueButton>\n                <Tooltip\n                  title={\n                    !isStaffCheckedIn && \"You must check in to help students!\"\n                  }\n                >\n                  <HelpNextButton\n                    onClick={helpNext}\n                    disabled={\n                      !isStaffCheckedIn ||\n                      !questions.find(\n                        (q) => q.status === QuestionStatusKeys.Queued\n                      ) ||\n                      isHelping\n                    }\n                    data-cy=\"help-next\"\n                  >\n                    Help Next\n                  </HelpNextButton>\n                </Tooltip>\n                {isStaffCheckedIn ? (\n                  <CheckOutButton\n                    danger\n                    disabled={isHelping}\n                    data-cy=\"check-out-button\"\n                    onClick={async () => {\n                      await API.taStatus.checkOut(courseId, queue?.room);\n                      mutateQueue();\n                    }}\n                  >\n                    Check Out\n                  </CheckOutButton>\n                ) : (\n                  <CheckInButton\n                    onClick={async () => {\n                      await API.taStatus.checkIn(courseId, queue?.room);\n                      mutateQueue();\n                    }}\n                    data-cy=\"check-in-button\"\n                  >\n                    Check In\n                  </CheckInButton>\n                )}\n              </>\n            }\n          />\n          <VerticalDivider />\n          <Space direction=\"vertical\" size={40} style={{ flexGrow: 1 }}>\n            {isHelping && (\n              <TABanner\n                helpingQuestion={helpingQuestion}\n                updateQuestion={updateQuestionTA}\n              />\n            )}\n            <QueueQuestions\n              questions={renderedQuestions}\n              isHelping={isHelping}\n              onOpenCard={onOpenCard}\n            />\n          </Space>\n        </QueuePageContainer>\n        {currentQuestion && (\n          <StudentPopupCard\n            onClose={onCloseClick}\n            question={currentQuestion}\n            visible={openPopup}\n            updateQuestion={updateQuestionTA}\n            isStaffCheckedIn={isStaffCheckedIn}\n          />\n        )}\n        <EditQueueModal\n          queueId={qid}\n          visible={queueSettingsModal}\n          onClose={() => setQueueSettingsModal(false)}\n        />\n      </>\n    );\n  } else {\n    return <div />;\n  }\n}\n\nconst QueueHeader = styled.h2`\n  font-weight: 500;\n  font-size: 24px;\n  color: #212934;\n  margin-bottom: 0;\n`;\n\nconst NoQuestionsText = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  color: #212934;\n`;\n\nfunction NotifReminderButton() {\n  const [isNotifOpen, setIsNotifOpen] = useState(false);\n  const NotifRemindButton = styled(QueueInfoColumnButton)`\n    margin-top: 16px;\n    border-radius: 6px;\n    background: #fff;\n  `;\n\n  return (\n    <>\n      <NotifRemindButton onClick={(e) => setIsNotifOpen(true)}>\n        Sign Up for Notifications\n      </NotifRemindButton>\n      {isNotifOpen && (\n        <NotificationSettingsModal\n          visible={isNotifOpen}\n          onClose={() => setIsNotifOpen(false)}\n        />\n      )}\n    </>\n  );\n}\n\ninterface QueueProps {\n  questions: Question[];\n  isHelping: boolean;\n  onOpenCard: (q: Question) => void;\n}\nfunction QueueQuestions({ questions, isHelping, onOpenCard }: QueueProps) {\n  const { phoneNotifsEnabled, desktopNotifsEnabled } = useProfile();\n  return (\n    <div data-cy=\"queueQuestions\">\n      {questions.length === 0 ? (\n        <>\n          <NoQuestionsText>There are no questions in the queue</NoQuestionsText>\n          {!isHelping && !phoneNotifsEnabled && !desktopNotifsEnabled && (\n            <NotifReminderButton />\n          )}\n        </>\n      ) : (\n        <>\n          <QueueHeader>Queue</QueueHeader>\n          <TAHeaderCard bordered={false}>\n            <CenterRow justify=\"space-between\">\n              <Col xs={2} lg={1}>\n                <HeaderText>#</HeaderText>\n              </Col>\n              <Col xs={14} sm={11} lg={5}>\n                <HeaderText>name</HeaderText>\n              </Col>\n              <Col xs={0} lg={2}>\n                <HeaderText>type</HeaderText>\n              </Col>\n              <Col xs={0} lg={7}>\n                <HeaderText>question</HeaderText>\n              </Col>\n              <Col xs={0} lg={2}>\n                <HeaderText>wait</HeaderText>\n              </Col>\n              <Col span={2}>\n                <StatusText>status</StatusText>\n              </Col>\n              <Col>\n                <Placeholder />\n              </Col>\n            </CenterRow>\n          </TAHeaderCard>\n        </>\n      )}\n      {questions.map((question: Question, index: number) => (\n        <TAQueueCard\n          key={question.id}\n          rank={index + 1}\n          question={question}\n          onOpen={(q) => !isHelping && onOpenCard(q)}\n        />\n      ))}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}